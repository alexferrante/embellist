{"version":3,"sources":["serviceWorker.js","utilityLibrary/dev/logging.js","reducers/authentication.js","reducers/spotify.js","reducers/index.js","actionCreators/constants.js","store/store.js","components/AuthenticatedRoute.js","components/UnauthenticatedRoute.js","actionCreators/actions.js","styledComponents/NeumorphicLoginWrapper.js","styledComponents/NeumorphicLoginButton.js","utilityLibrary/spotify.js","containers/LoginContainer.js","containers/AuthenticatedDashboard.js","routing/Routes.js","styledComponents/MainAppWrapper.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","COLOURS","trace","info","warn","error","level","message","source","namespace","createDebug","debug","color","this","generateMessage","initialState","isAuthenticated","accessToken","userData","combineReducers","authentication","state","action","console","log","type","Object","assign","spotify","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","C","component","cProps","props","rest","render","to","storeUserData","NeumorphicLoginWrapper","styled","div","NeumorphicLoginButton","button","SpotifyAPI","getCategory","categoryID","paramObject","a","url","axios","get","headers","params","category","getCategoryPlaylists","categoryPlaylists","getListOfCategories","country","locale","limit","offset","listOfCategories","getNewReleases","newReleases","getFeaturedPlaylists","timestamp","featuredPlaylists","getRecommendations","market","seedArtists","seedGenres","seedTracks","seed_artists","seed_genres","seed_tracks","recommendations","getFeaturedPlaylist","local","featuredPlaylist","getAlbum","albumID","bodyParam","album","getAlbumTracks","albumTracks","getAlbums","albumIdStrings","ids","albumIDs","getArtist","artistID","artistData","getArtistAlbums","includeGroups","include_groups","artistAlbums","getArtistTopTracks","queryParam","artistTopTracks","getRelatedArtists","relatedArtists","getSeveralArtists","artistIDs","artistsData","getEpisode","episodeID","episodeData","getSeveralEpisodes","listOfEpisodeIDs","severalEpisodeData","getUserTop","userTopTracks","addTracksToPlaylist","playlistID","trackIDArray","uris","join","position","undefined","post","addTrackResponse","changePlaylistDetails","optionalParam","put","data","name","public","collaborative","description","responseObject","createPlaylist","userID","getCurrentUserPlaylist","currentUserPlaylist","getUserPlaylist","userPlaylist","getPlaylist","playlist","getPlaylistCoverImage","playlistImage","getPlaylistTracks","playlistTracks","removeTracksFromPlaylist","trackURIArray","newTrackArray","map","uri","delete","tracks","reorderPlaylistTracks","rangeStart","insertBefore","range_start","insert_before","range_length","rangeLength","snapshot_id","snapshotID","replacePlaylistTracks","uploadPlaylistImage","imageJPEG","body","checkIfAlbumSaved","areAlbumSavedArray","checkIfShowSaved","showIDs","isShowSavedArray","checkIfTrackSaved","trackIDs","isTrackSavedArray","getUserSavedAlbums","savedAlbums","getUserSavedShows","savedShows","getUserSavedTracks","savedTracks","removeAlbums","responseBody","removeShows","removeTracks","saveShows","saveTracks","isFollowingArtists","isFollowingArtist","isFollowingUsers","userIDs","isFollowingUser","checkIfUsersFollowPlaylist","areUsersFollowingArray","followArtist","serverResponse","followUser","spotifyIDs","followPlaylist","getUserFollowedArtists","followedArtist","unfollowArtist","unfollowUser","unfollowPlaylist","getShowData","showID","showData","getSeveralShowsData","param","showsData","getShowEpisodes","episodes","getTrackAnalysis","trackID","trackAnalysis","getTrackFeatures","trackFeatures","getSeveralTrackFeatures","severalTrackFeatures","getSeveralTracks","paramObj","severalTracksData","getTrackData","trackData","getCurrentUserProfile","currentUserData","getUserData","logoAnimation","keyframes","LogoWrapper","TitleText","SubTitleText","SpotifyLogoLineWrapper","SpotifyLogoLargeLine","SpotifyLogoMediumLine","SpotifyLogoSmallLine","LoginContainer","componentDidMount","hashParams","r","q","hash","substring","e","exec","decodeURIComponent","access_token","store","dispatch","authenticateUser","userInformation","getUserSpotifyInfo","then","response","catch","err","user","connectToSpotify","href","onClick","Component","loadingAnimation","ImageWrapper","imageLoaded","TextWrapper","AuthenticatedDashboard","handleSignOut","userImage","images","displayName","display_name","followerCount","email","followers","total","followerSentence","defaultProps","connect","childProps","UnauthenticatedRoute","path","exact","AuthenticatedRoute","MainAppWrapper","App","Routes","require","config","process","REACT_ENV","localStorage","setItem","Log","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qCCXAC,EAAU,CACdC,MAAO,YACPC,KAAM,OACNC,KAAM,OACNC,MAAO,OAiCM,M,wGA7BGC,EAAOC,EAASC,GAE9B,IAAMC,EAAS,UAXN,cAWM,YAAcH,GACvBI,EAAcC,IAAMF,GAG1BC,EAAYE,MAAQX,EAAQK,GAEzBE,EAAUE,EAAYF,EAAQD,GAC1BG,EAAYH,K,4BAGfA,EAASC,GACb,OAAOK,KAAKC,gBAAgB,QAASP,EAASC,K,2BAG3CD,EAASC,GACZ,OAAOK,KAAKC,gBAAgB,OAAQP,EAASC,K,2BAG1CD,EAASC,GACZ,OAAOK,KAAKC,gBAAgB,OAAQP,EAASC,K,4BAGzCD,EAASC,GACb,OAAOK,KAAKC,gBAAgB,QAASP,EAASC,O,cChC5CO,EAAe,CACjBC,iBAAiB,EACjBC,YAAa,ICLXF,EAAe,CACjBG,UAAU,GCFCC,cAAgB,CAC3BC,eFQW,WAAyC,IAA/BC,EAA8B,uDAAtBN,EAAcO,EAAQ,uCAEnD,OADAC,QAAQC,IAAI,0CACLF,EAAOG,MACV,IGhByB,oBHiBrB,OAAOC,OAAOC,OAAO,GAAIN,EAAO,CAACL,gBAAiBM,EAAON,kBAC7D,IGjB0B,qBHkBtB,OAAOU,OAAOC,OAAO,GAAIN,EAAO,CAACJ,YAAaK,EAAOL,cACzD,IGjBqB,gBHkBjB,OAAOS,OAAOC,OAAO,GAAIN,EAAO,CAACL,gBAAiBM,EAAON,kBAC7D,IGpB2B,sBHqBvB,OAAOU,OAAOC,OAAO,GAAIN,EAAO,CAACJ,YAAaK,EAAOL,cAEzD,QACI,OAAOI,IEpBfO,QDGW,WAAyC,IAA/BP,EAA8B,uDAAtBN,EAAcO,EAAQ,uCAEnD,OADAC,QAAQC,IAAI,0CACLF,EAAOG,MACV,IEIuB,kBFHnB,OAAOC,OAAOC,OAAO,GAAIN,EAAO,CAACH,SAAUI,EAAOJ,WACtD,QACI,OAAOG,MGPJQ,cACbC,EACAjC,OAAOkC,8BAAgClC,OAAOkC,gC,wDCCjC,kBAAcC,EAAd,EAAGC,UAAqBC,EAAxB,EAAiBC,MAAkBC,EAAnC,4CACb,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAAAF,GAAK,OACXD,EAAOlB,gBACH,kBAACgB,EAAD,iBAAOG,EAAWD,IAClB,kBAAC,IAAD,CACEI,GAAG,WCTA,kBAAcN,EAAd,EAAGC,UAAqBC,EAAxB,EAAiBC,MAAkBC,EAAnC,4CACb,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAAAF,GAAK,OACVD,EAAOlB,gBAEJ,kBAAC,IAAD,CAAUsB,GAAG,mBADb,kBAACN,EAAD,iBAAOG,EAAWD,S,6DCKfK,EAAgB,SAAClB,GAAD,MAAY,CACrCI,KJJ2B,kBIK3BP,SAAUG,I,+TCjBd,IAaemB,EAbgBC,IAAOC,IAAV,K,0kBCF5B,IAyBeC,EAzBeF,IAAOG,OAAV,K,QC+gEZC,MA76DX,WAAY5B,GAAc,IAAD,gCA2BzB6B,YA3ByB,uCA2BX,WAAOC,EAAYC,GAAnB,iBAAAC,EAAA,sEASFC,EAAM,gDAAkDH,EATtD,SAUWI,IAAMC,IAAIF,EAAK,CAC5BG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IAdN,OAUNO,EAVM,uDAiBNhC,QAAQlB,MAAM,0DAAd,MAjBM,iCAoBHkD,GApBG,yDA3BW,6DA+DzBC,qBA/DyB,uCA+DF,WAAOT,EAAYC,GAAnB,eAAAC,EAAA,sEAUL,gDAVK,SAYWE,IAAMC,IAFtB,gDAE+B,CACrCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IAhBG,OAYfS,EAZe,uDAmBflC,QAAQlB,MAAM,mEAAd,MAnBe,eAsBnBkB,QAAQC,IAAI,yBAA0BiC,GAtBnB,kBAuBZA,GAvBY,yDA/DE,6DAsGzBC,oBAtGyB,uCAsGH,WAAOC,EAASC,EAAQC,EAAOC,GAA/B,iBAAAb,EAAA,6DAGdD,EAAc,CACdW,QAASA,EACTC,OAAQA,EACRC,MAAOA,EACPC,OAAQA,GAPM,SAWJ,gDAXI,SAaWX,IAAMC,IAFrB,gDAE8B,CACpCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IAjBE,OAade,EAbc,uDAoBdxC,QAAQlB,MAAM,kEAAd,MApBc,eAuBlBkB,QAAQC,IAAI,kBAAmBuC,GAvBb,kBAwBXA,GAxBW,yDAtGG,iEA2IzBC,eA3IyB,uCA2IR,WAAOH,EAAOF,EAASG,GAAvB,iBAAAb,EAAA,sEAKLD,EAAc,CACdW,QAASA,EACTE,MAAOA,EACPC,OAAQA,GARH,SAaK,iDAbL,SAceX,IAAMC,IADhB,iDACyB,CAC/BC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IAlBP,OAcLiB,EAdK,uDAqBL1C,QAAQlB,MAAM,6DAAd,MArBK,eAuBTkB,QAAQC,IAAI,mBAAoByC,GAvBvB,kBAwBFA,GAxBE,kCA0BT1C,QAAQlB,MAAM,2CAAd,MA1BS,gEA3IQ,+DAsLzB6D,qBAtLyB,uCAsLF,WAAON,EAAQD,EAASQ,EAAWN,EAAOC,GAA1C,iBAAAb,EAAA,6DAGfD,EAAc,CACdY,OAAQA,EACRD,QAASA,EACTQ,UAAWA,EACXN,MAAOA,EACPC,OAAQA,GARO,SAYL,uDAZK,SAaWX,IAAMC,IADtB,uDAC+B,CACrCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IAjBG,OAafoB,EAbe,uDAoBf7C,QAAQlB,MAAM,mEAAd,MApBe,eAsBnBkB,QAAQC,IAAI,mBAAoB4C,GAtBb,kBAuBZA,GAvBY,yDAtLE,mEA8NzBC,mBA9NyB,uCA8NJ,WAAOR,EAAOS,EAAQC,EAAaC,EAAYC,GAA/C,iBAAAxB,EAAA,6DAEbD,EAAc,CACda,MAAOA,EACPS,OAAQA,EACRI,aAAcH,EACdI,YAAaH,EACbI,YAAaH,GAPA,SAUH,6CAVG,SAWWtB,IAAMC,IADpB,6CAC6B,CACnCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IAfC,OAWb6B,EAXa,uDAkBbtD,QAAQlB,MAAM,8CAAd,MAlBa,eAoBjBkB,QAAQC,IAAI,0BAA2BqD,GApBtB,kBAqBVA,GArBU,yDA9NI,mEAuPzBC,oBAvPyB,uCAuPH,WAAOlB,EAAQD,EAASQ,EAAWN,EAAOC,GAA1C,iBAAAb,EAAA,6DAEdD,EAAc,CACd+B,MAAOnB,EACPD,QAASA,EACTQ,UAAWA,EACXN,MAAOA,EACPC,OAAQA,GAPM,SAWJ,kFAXI,SAYWX,IAAMC,IADrB,kFAC8B,CACpCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IAhBE,OAYdgC,EAZc,uDAmBdzD,QAAQlB,MAAM,+CAAd,MAnBc,eAqBlBkB,QAAQC,IAAI,uBAAwBwD,GArBlB,kBAsBXA,GAtBW,yDAvPG,mEAyRzBC,SAzRyB,uCAyRd,WAAOC,EAASZ,GAAhB,mBAAArB,EAAA,6DAEHkC,EAAY,CACZb,OAAQA,GAHL,SAMCpB,EAAO,qCAAsCgC,EAN9C,SAOW/B,IAAMC,IAAIF,EAAK,CACzBG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6B,IAXT,OAOHC,EAPG,uDAcH7D,QAAQlB,MAAM,wCAAd,MAdG,iCAgBA+E,GAhBA,yDAzRc,6DAqTzBC,eArTyB,uCAqTR,WAAOH,EAASrB,EAAOC,EAAQQ,GAA/B,mBAAArB,EAAA,6DAETkC,EAAY,CACZtB,MAAOA,EACPC,OAAQA,EACRQ,OAAQA,GALC,SAQLpB,EAAO,qCAAuCgC,EAAU,UARnD,SASW/B,IAAMC,IAAIF,EAAK,CAC/BG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6B,IAbH,OASTG,EATS,uDAgBT/D,QAAQlB,MAAM,iDAhBL,iCAkBNiF,GAlBM,yDArTQ,iEAiVzBC,UAjVyB,uCAiVb,WAAOC,EAAgBlB,GAAvB,iBAAArB,EAAA,6DAEJkC,EAFI,aAGJM,IAAKD,EACLlB,UAJI,SAIIA,GAJJ,SAOO,oCAPP,SAQanB,IAAMC,IADZ,oCACqB,CAC5BC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6B,IAZR,OAQJO,EARI,uDAeJnE,QAAQlB,MAAM,8CAfV,iCAiBDqF,GAjBC,yDAjVa,6DAqWzBC,UArWyB,uCAqWb,WAAOC,GAAP,iBAAA3C,EAAA,sEAGAC,EAAO,sCAAwC0C,EAH/C,SAIezC,IAAMC,IAAIF,EAAK,CAC9BG,QAAS,CACL,cAAiB,UAAY,EAAKpC,eANtC,OAIJ4E,EAJI,uDAUJtE,QAAQlB,MAAM,yCAAd,MAVI,iCAYDwF,GAZC,yDArWa,2DAuXzBC,gBAvXyB,uCAuXP,WAAOF,EAAUG,EAAepC,EAASE,EAAOC,GAAhD,mBAAAb,EAAA,6DAEVkC,EAAY,CACZa,eAAgBD,EAChBpC,QAASA,EACTE,MAAOA,EACPC,OAAQA,GANE,SASNZ,EAAO,sCAAwC0C,EAAW,UATpD,SAUWzC,IAAMC,IAAIF,EAAK,CAChCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6B,IAdF,OAUVc,EAVU,uDAiBV1E,QAAQlB,MAAM,+CAAd,MAjBU,iCAmBP4F,GAnBO,yDAvXO,mEA8YzBC,mBA9YyB,uCA8YJ,WAAON,EAAUjC,GAAjB,mBAAAV,EAAA,6DAEbkD,EAAa,CACbxC,QAASA,GAHI,SAMTT,EAAO,sCAAwC0C,EAAW,cANjD,SAOWzC,IAAMC,IAAIF,EAAK,CACnCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAXC,OAObC,EAPa,uDAcb7E,QAAQlB,MAAM,kDAAd,MAda,iCAgBV+F,GAhBU,yDA9YI,6DAkazBC,kBAlayB,uCAkaL,WAAOT,GAAP,iBAAA3C,EAAA,sEAGRC,EAAO,qCAAuC0C,EAAW,mBAHjD,SAIWzC,IAAMC,IAAIF,EAAK,CAClCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,eAN9B,OAIZqF,EAJY,uDAUZ/E,QAAQlB,MAAM,iDAAd,MAVY,iCAYTiG,GAZS,yDAlaK,2DAobzBC,kBApbyB,uCAobL,WAAOC,GAAP,iBAAAvD,EAAA,6DAEZkD,EAAa,CACbV,IAAKe,GAHO,SAOD,qCAPC,SAQQrD,IAAMC,IADf,qCACwB,CAC/BC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAZA,OAQZM,EARY,uDAeZlF,QAAQlB,MAAM,iDAAd,MAfY,iCAiBToG,GAjBS,yDApbK,2DAsdzBC,WAtdyB,uCAsdZ,WAAMC,EAAWrC,GAAjB,mBAAArB,EAAA,6DAGLkD,EAAa,CACb7B,OAAQA,GAJH,SAQDpB,EAAM,uCAAyCyD,EAR9C,SASexD,IAAMC,IAAIF,EAAK,CAC/BG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAbP,OASLS,EATK,uDAgBLrF,QAAQlB,MAAM,sCAAd,MAhBK,eAmBTkB,QAAQC,IAAI,eAAeoF,GAnBlB,kBAoBFA,GApBE,yDAtdY,6DA2fzBC,mBA3fyB,uCA2fJ,WAAMC,EAAkBxC,GAAxB,iBAAArB,EAAA,6DAGbkD,EAAa,CACbV,IAAKqB,EACLxC,OAAQA,GALK,SASH,uCATG,SAUcnB,IAAMC,IADvB,uCACgC,CACtCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAdC,OAUbY,EAVa,uDAiBbxF,QAAQlB,MAAM,8CAAd,MAjBa,eAoBjBkB,QAAQC,IAAI,wBAAyBuF,GApBpB,kBAqBVA,GArBU,yDA3fI,6DAuiBzBC,WAviByB,uCAuiBZ,WAAOvF,EAAMuB,GAAb,iBAAAC,EAAA,sEAIDC,EAAM,qCAAuCzB,EAJ5C,SAKiB0B,IAAMC,IAAIF,EAAK,CACjCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IATP,OAKLiE,EALK,uDAYL1F,QAAQlB,MAAR,4DAZK,iCAeF4G,GAfE,yDAviBY,6DAwkBzBC,oBAxkByB,uCAwkBH,WAAMC,EAAYC,EAAcpE,GAAhC,mBAAAC,EAAA,6DAIdkD,EAAa,CACbkB,KAAMD,EAAaE,KAAK,KACxBC,cAAyBC,GAAfxE,OAA2BwE,EAAYxE,EAAYuE,UAN/C,SAWVrE,EAXU,+CAWoCiE,EAXpC,oBAYWhE,IAAMsE,KAAKvE,EAAK,CACrCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAhBE,OAYduB,EAZc,uDAmBdnG,QAAQlB,MAAR,8DAnBc,iCAqBXqH,GArBW,yDAxkBG,+DA8mBzBC,sBA9mByB,uCA8mBD,WAAOR,EAAYS,GAAnB,iBAAA3E,EAAA,sEAIZC,EAJY,+CAIkCiE,GAJlC,SAKOhE,IAAM0E,IAAI3E,EAAK,CAClCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,YAClC,eAAgB,oBAEpB6G,KAAM,CACFC,UAAuBP,GAAjBI,GAA8BA,EAAcG,KAAOH,EAAcG,UAAOP,EAC9EQ,YAAyBR,GAAjBI,GAA8BA,EAAcI,OAASJ,EAAcI,YAASR,EACpFS,mBAAgCT,GAAjBI,GAA8BA,EAAcK,cAAgBL,EAAcK,mBAAgBT,EACzGU,iBAA8BV,GAAjBI,GAA8BA,EAAcM,YAAcN,EAAcM,iBAAcV,KAd3F,OAKhBW,EALgB,uHAoBbA,GApBa,yDA9mBC,6DAspBzBC,eAtpByB,uCAspBR,WAAOC,EAAQN,EAAMH,GAArB,iBAAA3E,EAAA,sEAGLC,EAHK,2CAGqCmF,EAHrC,uBAIclF,IAAMsE,KAAKvE,EAAK,CACnCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,YAClC,eAAgB,oBAEpB6G,KAAM,CACFC,KAAMA,EACNC,YAAyBR,GAAjBI,GAA8BA,EAAcI,OAASJ,EAAcI,YAASR,EACpFS,mBAAgCT,GAAjBI,GAA8BA,EAAcK,cAAgBL,EAAcK,mBAAgBT,EACzGU,iBAA8BV,GAAjBI,GAA8BA,EAAcM,YAAcN,EAAcM,iBAAcV,KAblG,OAITW,EAJS,uHAmBNA,GAnBM,yDAtpBQ,+DAurB1BG,uBAvrB0B,uCAurBD,WAAOtF,GAAP,eAAAC,EAAA,sEAIN,0CAJM,SAKYE,IAAMC,IADxB,0CACiC,CACvCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IATI,OAKhBuF,EALgB,uDAYhBhH,QAAQlB,MAAR,gEAZgB,iCAcbkI,GAda,yDAvrBC,2DAktB1BC,gBAltB0B,uCAktBR,WAAOH,EAAQrF,GAAf,iBAAAC,EAAA,sEAILC,EAJK,2CAIqCmF,EAJrC,uBAKYlF,IAAMC,IAAIF,EAAK,CAChCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IATH,OAKTyF,EALS,uDAYTlH,QAAQC,IAAR,kDAAuDiH,IAZ9C,iCAcNA,GAdM,yDAltBQ,6DAgvB1BC,YAhvB0B,uCAgvBZ,WAAOvB,EAAYnE,GAAnB,iBAAAC,EAAA,sEAIFC,EAJE,+CAI4CiE,GAJ5C,SAKWhE,IAAMC,IAAIF,EAAK,CAC/BG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IATH,OAKN2F,EALM,uDAYNpH,QAAQC,IAAR,qDAZM,iCAcHmH,GAdG,yDAhvBY,6DA0wB1BC,sBA1wB0B,uCA0wBF,WAAOzB,GAAP,iBAAAlE,EAAA,sEAIXC,EAJW,+CAImCiE,EAJnC,oBAKOhE,IAAMC,IAAIF,EAAK,CACjCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,eAP3B,OAKf4H,EALe,uDAWftH,QAAQlB,MAAR,+DAXe,iCAaZwI,GAbY,yDA1wBE,2DA0yB1BC,kBA1yB0B,uCA0yBN,WAAO3B,EAAYhB,GAAnB,iBAAAlD,EAAA,sEAIPC,EAJO,+CAIuCiE,EAJvC,oBAKYhE,IAAMC,IAAIF,EAAK,CAClCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IATD,OAKX4C,EALW,uDAYZxH,QAAQlB,MAAR,iEAZY,iCAcT0I,GAdS,yDA1yBM,6DAw0B1BC,yBAx0B0B,uCAw0BC,WAAO7B,EAAY8B,GAAnB,mBAAAhG,EAAA,6DAElBiG,EAAgBD,EAAcE,KAAI,SAACC,GACnC,MAAmB,kBAARA,EACA,CAACA,IAAKA,GAENA,KANO,SAWdlG,EAXc,+CAWgCiE,EAXhC,oBAYKhE,IAAMkG,OAAOnG,EAAK,CACrCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,YAClC,eAAgB,oBAEpB6G,KAAM,CACFwB,OAAQJ,KAlBE,OAYlBf,EAZkB,uDAsBlB5G,QAAQlB,MAAR,kEAtBkB,iCAwBf8H,GAxBe,yDAx0BD,6DAo3B1BoB,sBAp3B0B,uCAo3BF,WAAOpC,EAAYqC,EAAYC,EAAc7B,GAA7C,iBAAA3E,EAAA,sEAGZC,EAHY,+CAGkCiE,EAHlC,oBAIOhE,IAAM0E,IAAI3E,EAAK,CACjCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,YAClC,eAAgB,oBAEpB6G,KAAM,CACF4B,YAAaF,EACbG,cAAeF,EACfG,kBAA+BpC,GAAjBI,GAA8BA,EAAciC,YAAcjC,EAAciC,iBAAcrC,EACpGsC,iBAA8BtC,GAAjBI,GAA8BA,EAAcmC,WAAanC,EAAcmC,gBAAavC,KAb1F,OAIhBW,EAJgB,uDAiBhB5G,QAAQlB,MAAR,qDAA4D8H,IAjB5C,iCAmBbA,GAnBa,yDAp3BE,iEAq5BzB6B,sBAr5ByB,uCAq5BD,WAAO7C,EAAY8B,GAAnB,mBAAAhG,EAAA,6DAGhBkD,EAAa,CACbkB,KAAM4B,EAAc3B,KAAK,MAJT,SAQZpE,EARY,+CAQkCiE,EARlC,oBASOhE,IAAM0E,IAAI3E,EAAK,CAClCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAbI,OAShBgC,EATgB,uHAkBbA,GAlBa,yDAr5BC,6DAs7BzB8B,oBAt7ByB,uCAs7BH,WAAM9C,EAAY+C,GAAlB,iBAAAjH,EAAA,sEAIVC,EAJU,+CAIoCiE,EAJpC,oBAKShE,IAAM0E,IAAI3E,EAAI,CACjCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,YAClC,eAAgB,cAEpBkJ,KAAMD,IAVI,OAKd/B,EALc,uHAeXA,GAfW,yDAt7BG,6DAu9BzBiC,kBAv9ByB,uCAu9BL,WAAM1E,GAAN,iBAAAzC,EAAA,6DAGZkD,EAAa,CACbV,IAAKC,EAAS4B,KAAK,MAJP,SAQF,gDARE,SASenE,IAAMC,IADvB,gDACgC,CACtCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAbA,OASZkE,EATY,uDAgBZ9I,QAAQlB,MAAM,6CAAd,MAhBY,iCAmBTgK,GAnBS,yDAv9BK,2DA2/BzBC,iBA3/ByB,uCA2/BN,WAAMC,GAAN,iBAAAtH,EAAA,6DAGXkD,EAAa,CACbV,IAAK8E,EAAQjD,KAAK,MAJP,SAQD,+CARC,SAScnE,IAAMC,IADrB,+CAC8B,CACpCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAbD,OASXqE,EATW,uDAkBXjJ,QAAQlB,MAAM,4CAAd,MAlBW,iCAoBRmK,GApBQ,yDA3/BM,2DA+hCzBC,kBA/hCyB,uCA+hCL,WAAOC,GAAP,iBAAAzH,EAAA,6DAGZkD,EAAa,CACbV,IAAKiF,EAASpD,KAAK,MAJP,SAQF,gDARE,SAScnE,IAAMC,IADtB,gDAC+B,CACrCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAbA,OASZwE,EATY,uDAkBZpJ,QAAQlB,MAAM,6CAAd,MAlBY,iCAoBTsK,GApBS,yDA/hCK,2DAskCzBC,mBAtkCyB,uCAskCJ,WAAOzE,GAAP,eAAAlD,EAAA,sEAKH,uCALG,SAMOE,IAAMC,IADhB,uCACyB,CAC/BC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAVC,OAMb0E,EANa,uDAabtJ,QAAQlB,MAAM,yCAAd,MAba,eAgBjBkB,QAAQC,IAAI,wBAAyBqJ,GAhBpB,kBAiBVA,GAjBU,yDAtkCI,2DA0mCzBC,kBA1mCyB,uCA0mCL,WAAO3E,GAAP,eAAAlD,EAAA,sEAIF,sCAJE,SAKOE,IAAMC,IADf,sCACwB,CAC9BC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IATA,OAKZ4E,EALY,uDAYZxJ,QAAQlB,MAAM,wCAAd,MAZY,eAehBkB,QAAQC,IAAI,uBAAwBuJ,GAfpB,kBAgBTA,GAhBS,yDA1mCK,2DA6oCzBC,mBA7oCyB,uCA6oCJ,WAAOnH,EAAOC,EAAQQ,GAAtB,iBAAArB,EAAA,6DAGbkD,EAAa,CACbtC,MAAOA,EACPC,OAAQA,EACRQ,OAAQA,GANK,SAUH,uCAVG,SAWOnB,IAAMC,IADhB,uCACyB,CAC/BC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAfC,OAWb8E,EAXa,uDAkBb1J,QAAQlB,MAAM,yCAAd,MAlBa,eAqBjBkB,QAAQC,IAAI,wBAAyByJ,GArBpB,kBAsBVA,GAtBU,yDA7oCI,+DAirCzBC,aAjrCyB,uCAirCV,WAAOxF,GAAP,iBAAAzC,EAAA,6DAGPkD,EAAa,CACbV,IAAKC,EAAS4B,KAAK,MAJZ,SAQG,uCARH,SAScnE,IAAMkG,OADjB,uCAC6B,CACnChG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAbL,OASPgF,EATO,uDAiBP5J,QAAQlB,MAAM,wCAAd,MAjBO,iCAoBJ8K,GApBI,yDAjrCU,2DAmtCzBC,YAntCyB,uCAmtCX,WAAOb,GAAP,iBAAAtH,EAAA,6DAGNkD,EAAa,CACbV,IAAK8E,EAAQjD,KAAK,MAJZ,SAQI,sCARJ,SASenE,IAAMkG,OADjB,sCAC6B,CACnChG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAbN,OASNgF,EATM,uDAiBN5J,QAAQlB,MAAM,uCAAd,MAjBM,iCAmBH8K,GAnBG,yDAntCW,2DAkvCzBE,aAlvCyB,uCAkvCV,WAAOX,GAAP,iBAAAzH,EAAA,6DAGPkD,EAAa,CACbV,IAAKiF,EAASpD,KAAK,MAJZ,SAQG,uCARH,SAScnE,IAAMkG,OADjB,uCAC6B,CACnChG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAbL,OASPgF,EATO,uDAiBP5J,QAAQlB,MAAM,wCAAd,MAjBO,iCAmBJ8K,GAnBI,yDAlvCU,2DA2xCzBG,UA3xCyB,uCA2xCb,WAAOf,GAAP,iBAAAtH,EAAA,6DAGJkD,EAAa,CACbV,IAAK8E,EAAQjD,KAAK,MAJd,SAQM,sCARN,SASiBnE,IAAM0E,IADjB,sCAC0B,CAChCxE,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAbR,OASJgF,EATI,uDAiBJ5J,QAAQlB,MAAM,qCAAd,MAjBI,iCAmBD8K,GAnBC,yDA3xCa,2DA0zCzBI,WA1zCyB,uCA0zCZ,WAAOb,GAAP,iBAAAzH,EAAA,6DAGLkD,EAAa,CACbV,IAAKiF,EAASpD,KAAK,MAJd,SAQK,uCARL,SASgBnE,IAAM0E,IADjB,uCAC0B,CAChCxE,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAbP,OASLgF,EATK,uDAiBL5J,QAAQlB,MAAM,sCAAd,MAjBK,iCAmBF8K,GAnBE,yDA1zCY,2DA61CzBK,mBA71CyB,uCA61CJ,WAAOhF,GAAP,iBAAAvD,EAAA,6DAGbkD,EAAa,CACb1E,KAAM,SACNgE,IAAKe,EAAUc,KAAK,MALP,SASH,mDATG,SAUcnE,IAAMC,IADvB,mDACgC,CACtCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAdC,OAUbsF,EAVa,uDAiBblK,QAAQlB,MAAM,8CAAd,MAjBa,iCAmBVoL,GAnBU,yDA71CI,2DA83CzBC,iBA93CyB,uCA83CN,WAAOC,GAAP,iBAAA1I,EAAA,6DAGXkD,EAAa,CACb1E,KAAM,OACNgE,IAAKkG,EAAQrE,KAAK,MALP,SASD,mDATC,SAUcnE,IAAMC,IADrB,mDAC8B,CACpCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAdD,OAUXyF,EAVW,uDAiBXrK,QAAQlB,MAAM,4CAAd,MAjBW,iCAmBRuL,GAnBQ,yDA93CM,2DAg6CzBC,2BAh6CyB,uCAg6CI,WAAO1E,EAAYwE,GAAnB,mBAAA1I,EAAA,6DAGrBkD,EAAa,CACbV,IAAKkG,EAAQrE,KAAK,MAJG,SAOjBpE,EAAM,wCAAyCiE,EAAY,sBAP1C,SAQWhE,IAAMC,IAAIF,EAAK,CAC3CG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAZS,OAQrB2F,EARqB,uDAerBvK,QAAQlB,MAAM,sDAAd,MAfqB,iCAiBlByL,GAjBkB,yDAh6CJ,6DA67CzBC,aA77CyB,uCA67CV,WAAOvF,GAAP,iBAAAvD,EAAA,6DAGPkD,EAAa,CACb1E,KAAM,SACNgE,IAAKe,GALE,SAQG,0CARH,SASiBrD,IAAM0E,IADpB,0CAC6B,CACnCxE,QAAS,CACL,cAAiB,UAAY,EAAKpC,YAClC,eAAgB,oBAEpBqC,OAAQ6C,IAdL,OASP6F,EATO,uDAiBPzK,QAAQlB,MAAM,wCAAd,MAjBO,iCAmBJ2L,GAnBI,yDA77CU,2DAq9CzBC,WAr9CyB,uCAq9CZ,WAAOC,GAAP,iBAAAjJ,EAAA,6DAGLkD,EAAa,CACb1E,KAAM,OACNgE,IAAKyG,GALA,SAQK,0CARL,SASmB/I,IAAM0E,IADpB,0CAC6B,CACnCxE,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAbP,OASL6F,EATK,uDAgBLzK,QAAQlB,MAAM,sCAAd,MAhBK,iCAkBF2L,GAlBE,yDAr9CY,2DA4/CzBG,eA5/CyB,uCA4/CR,WAAOhF,EAAYhB,GAAnB,iBAAAlD,EAAA,sEAILC,EAJK,+CAIyCiE,EAJzC,uBAKehE,IAAM0E,IAAI3E,EAAK,CACnCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,YAClC,eAAgB,oBAEpBqC,OAAQ6C,IAVH,OAKT6F,EALS,uDAaTzK,QAAQlB,MAAM,0CAAd,MAbS,iCAeN2L,GAfM,yDA5/CQ,6DA4hDzBI,uBA5hDyB,uCA4hDA,WAAOjG,GAAP,eAAAlD,EAAA,sEAIP,sDAJO,SAKOE,IAAM0E,IADpB,sDAC6B,CACnCxE,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IATK,OAKjBkG,EALiB,uDAYjB9K,QAAQlB,MAAM,kDAAd,MAZiB,iCAcdgM,GAdc,yDA5hDA,2DAwjDzBC,eAxjDyB,uCAwjDR,WAAM9F,GAAN,iBAAAvD,EAAA,6DAGTkD,EAAa,CACb1E,KAAM,SACNgE,IAAKe,EAAUc,KAAK,MALX,SASC,0CATD,SAUYnE,IAAMkG,OADjB,0CAC6B,CACnChG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAdH,OAUTgF,EAVS,uDAkBT5J,QAAQlB,MAAM,0CAAd,MAlBS,iCAqBN8K,GArBM,yDAxjDQ,2DA0lDzBoB,aA1lDyB,uCA0lDV,WAAMZ,GAAN,iBAAA1I,EAAA,6DAGPkD,EAAa,CACb1E,KAAM,OACNgE,IAAKkG,EAAQrE,KAAK,MALX,SASG,0CATH,SAUcnE,IAAMkG,OADjB,0CAC6B,CACnChG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IAdL,OAUPgF,EAVO,uDAkBP5J,QAAQlB,MAAM,wCAAd,MAlBO,iCAqBJ8K,GArBI,yDA1lDU,2DA0nDzBqB,iBA1nDyB,uCA0nDN,WAAMrF,GAAN,iBAAAlE,EAAA,sEAIPC,EAJO,+CAIuCiE,EAJvC,uBAKUhE,IAAMkG,OAAOnG,EAAK,CACnCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,eAP/B,OAKXkK,EALW,uDAYX5J,QAAQlB,MAAM,4CAAd,MAZW,iCAeR8K,GAfQ,yDA1nDM,2DAypDzBsB,YAzpDyB,uCAypDX,WAAOC,EAAQvG,GAAf,iBAAAlD,EAAA,sEAIFC,EAJE,2CAIwCwJ,GAJxC,SAKWvJ,IAAMC,IAAIF,EAAK,CAC5BG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IATN,OAKNwG,EALM,uDAaNpL,QAAQlB,MAAM,uCAAd,MAbM,iCAeHsM,GAfG,yDAzpDW,6DAurDzBC,oBAvrDyB,uCAurDH,WAAOrC,EAASpE,GAAhB,iBAAAlD,EAAA,6DAId4J,EAAQ,CACRpH,IAAK8E,EAAQjD,KAAK,KAClBhD,OAAQ6B,EAAW7B,QANL,qDAWInB,IAAMC,IAXV,mCAWmB,CAC7BC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQuJ,IAfE,OAWdC,EAXc,uDAmBdvL,QAAQlB,MAAM,+CAAd,MAnBc,iCAqBXyM,GArBW,yDAvrDG,6DA+sDzBC,gBA/sDyB,uCA+sDP,WAAOL,EAAQvG,GAAf,iBAAAlD,EAAA,sEAINC,EAJM,2CAIoCwJ,EAJpC,sBAKOvJ,IAAMC,IAAIF,EAAK,CAC5BG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQ6C,IATF,OAKV6G,EALU,uDAYVzL,QAAQlB,MAAM,2CAAd,MAZU,iCAcP2M,GAdO,yDA/sDO,6DA4uDzBC,iBA5uDyB,uCA4uDN,WAAOC,GAAP,iBAAAjK,EAAA,sEAIPC,EAJO,oDAI4CgK,GAJ5C,SAKW/J,IAAMC,IAAIF,EAAK,CACjCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,eAP/B,OAKXkM,EALW,uDAWX5L,QAAQlB,MAAR,2DAXW,iCAaR8M,GAbQ,yDA5uDM,2DAswD1BC,iBAtwD0B,uCAswDP,WAAOF,GAAP,iBAAAjK,EAAA,sEAINC,EAJM,oDAI6CgK,GAJ7C,SAKY/J,IAAMC,IAAIF,EAAK,CACjCG,QAAS,CACL,cAAiB,UAAY,EAAKpC,eAPhC,OAKVoM,EALU,uDAWV9L,QAAQlB,MAAR,2DAXU,iCAaPgN,GAbO,yDAtwDO,2DAmyD1BC,wBAnyD0B,uCAmyDA,WAAOlG,GAAP,iBAAAnE,EAAA,6DAEjBD,EAAc,CACdyC,IAAK2B,EAAaE,KAAK,MAHN,8DAOYnE,IAAMC,IAPlB,4CAO2B,CACxCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IAXK,OAOjBuK,EAPiB,uDAcjBhM,QAAQlB,MAAR,kEAdiB,iCAgBdkN,GAhBc,yDAnyDA,2DAm0DzBC,iBAn0DyB,uCAm0DN,WAAOpG,EAAcqG,GAArB,iBAAAxK,EAAA,6DAEXD,EAAc,CACdyC,IAAK2B,EAAaE,KAAK,MAHZ,8DAOenE,IAAMC,IAPrB,4CAO8B,CACrCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IAXD,OAOX0K,EAPW,uDAcXnM,QAAQlB,MAAR,2DAdW,iCAgBRqN,GAhBQ,yDAn0DM,6DAi2DzBC,aAj2DyB,uCAi2DV,WAAOT,EAASlK,GAAhB,iBAAAC,EAAA,sEAIHC,EAJG,4CAIwCgK,GAJxC,SAKW/J,IAAMC,IAAIF,EAAK,CAC7BG,QAAS,CACL,cAAiB,UAAY,EAAKpC,aAEtCqC,OAAQN,IATL,OAKP4K,EALO,uDAYPrM,QAAQlB,MAAR,uDAZO,iCAcJuN,GAdI,yDAj2DU,6DA03D1BC,sBA13D0B,sBA03DF,4BAAA5K,EAAA,sEAIN,gCAJM,SAKQE,IAAMC,IADpB,gCAC6B,CACtCC,QAAS,CACL,cAAiB,UAAY,EAAKpC,eAPvB,OAKhB6M,EALgB,uDAWhBvM,QAAQlB,MAAR,gEAXgB,iCAabyN,GAba,yDA13DE,KAo5D1BC,YAp5D0B,uCAo5DZ,WAAO1F,GAAP,iBAAApF,EAAA,sEAIFC,EAJE,2CAIwCmF,GAJxC,SAKYlF,IAAMC,IAAIF,EAAK,CAC5BG,QAAS,CACL,cAAiB,UAAY,EAAKpC,eAPrC,OAKLC,EALK,uDAWNK,QAAQlB,MAAR,+DAXM,iCAaHa,GAbG,yDAp5DY,sDACrBL,KAAKI,YAAcA,G,+tDCnF3B,IAAM+M,EAAgBC,YAAH,KAMbC,EAAczL,IAAOC,IAAV,IAOQsL,EACHA,EACLA,GAUXG,EAAY1L,IAAOC,IAAV,KAOT0L,EAAe3L,IAAOC,IAAV,KAOZ2L,EAAyB5L,IAAOC,IAAV,KAStB4L,GAAuB7L,IAAOC,IAAV,KAWpB6L,GAAwB9L,YAAO6L,GAAP7L,CAAH,KAOrB+L,GAAuB/L,YAAO8L,GAAP9L,CAAH,KAmHXgM,G,YA9FX,WAAYtM,GAAO,IAAD,8BACd,4CAAMA,KAOVuM,kBARkB,sBAQE,0CAAAzL,EAAA,sDAKhB,IAJI0L,EAAa,GAEjBC,EAAI,uBACJC,EAAIhP,OAAOC,SAASgP,KAAKC,UAAU,GAC3BC,EAAIJ,EAAEK,KAAKJ,IACfF,EAAWK,EAAE,IAAME,mBAAmBF,EAAE,IAN5B,IAUZL,EAAWQ,aAVC,wBAWRlO,EAAc0N,EAAWQ,aAC7BC,EAAMC,SJrG0B,CACxC5N,KJxB8B,qBIyB9BR,YImGwCA,IAChC,EAAKqO,kBAAiB,GAClB1N,EAAU,IAAIiB,EAAW8L,EAAWQ,cAd5B,UAeSvN,EAAQ0G,yBAfjB,gCAgBgB1G,EAAQiM,wBAhBxB,QAgBR0B,EAhBQ,OAqBNrO,EAAWqO,EAAgBzH,KACjCsH,EAAMC,SAAS9M,EAAcrB,IAC7BK,QAAQC,IAAI,2BAA4B+N,GAvB5B,4CARF,EAqClBC,mBArCkB,uCAqCG,WAAOvO,GAAP,eAAAgC,EAAA,sEACEE,IAAMC,IAAI,gCAAiC,CAC1DC,QAAS,CACP,cAAiB,UAAYpC,KAGlCwO,MAAK,SAACC,GACH,OAAOA,KAEVC,OAAM,SAACC,GACJrO,QAAQC,IAAI,6BAA8BoO,MAV7B,OACXC,EADW,OAcjBT,EAAMC,SAAS9M,EAAcsN,EAAK/H,OAdjB,2CArCH,wDAwDlBgI,iBAAmB,WAEfjQ,OAAOC,SAASiQ,KAChB,2cA3Dc,EAiElBT,iBAAmB,WACfF,EAAMC,SJnK8B,CACxC5N,KJT6B,oBIU7BT,iBAAiB,KIiGb,EAAKK,MAAQ,GAFC,E,sEAsEd,OAMI,kBAAC,EAAD,KACI,kBAAC6M,EAAD,KACI,kBAACG,EAAD,KACI,kBAACC,GAAD,MACA,kBAACC,GAAD,MACA,kBAACC,GAAD,QAGR,kBAACL,EAAD,kBACA,kBAACC,EAAD,sBACA,kBAAC,EAAD,CAAuB4B,QAASnP,KAAKiP,kBAArC,c,GAxFaG,a,stDCzF7B,IAAMC,GAAmBjC,YAAH,MAMhBkC,GAAe1N,IAAOC,IAAV,MAKA,SAAAP,GAAK,OAAIA,EAAMiO,YAAN,cAA2BjO,EAAMiO,YAAjC,KAAmD,kFACrDF,GACHA,GACLA,IACM,SAAA/N,GAAK,OAAIA,EAAMiO,YAAc,QAAW,mBAChD,SAAAjO,GAAK,OAAIA,EAAMiO,YAAc,IAAK,OAQ3CC,GAAc5N,IAAOC,IAAV,MAMXyL,GAAY1L,IAAOC,IAAV,MAIG,SAAAP,GAAK,OAAIA,EAAMiO,YAAc,cAAiB,kFACvCF,GACHA,GACLA,IACM,SAAA/N,GAAK,OAAIA,EAAMiO,YAAc,QAAW,mBAClD,SAAAjO,GAAK,OAAIA,EAAMiO,YAAc,QAAS,iBAEtC,SAAAjO,GAAK,OAAIA,EAAMiO,YAAc,OAAS,WAM7ChC,GAAe3L,IAAOC,IAAV,MAIA,SAAAP,GAAK,OAAIA,EAAMiO,YAAc,cAAiB,kFACvCF,GACHA,GACLA,IACM,SAAA/N,GAAK,OAAIA,EAAMiO,YAAc,QAAW,mBAClD,SAAAjO,GAAK,OAAIA,EAAMiO,YAAc,OAAS,UACtC,SAAAjO,GAAK,OAAIA,EAAMiO,YAAa,QAAU,iBAK7CE,G,YACF,WAAYnO,GAAO,IAAD,8BACd,4CAAMA,KAMVoO,cAAgB,WACZnB,EAAMC,SLxEyB,CACnC5N,KJXyB,gBIYzBT,iBAAiB,IKuEboO,EAAMC,SLzD+B,CACzC5N,KJ5B+B,sBI6B/BR,YAAa,MKgDT,EAAKI,MAAQ,GAFC,E,sEAYR,IACEH,EAAaL,KAAKsB,MAAlBjB,SACFsP,EAAYtP,EAASuP,OAASvP,EAASuP,OAAO,GAAGvN,IAAM,GACvDwN,EAAcxP,EAASyP,aAAezP,EAASyP,aAAe,cAE9DC,GADS1P,EAAS2P,OAAQ3P,EAAS2P,MACnB3P,EAAS4P,UAAY5P,EAAS4P,UAAUC,MAAQ,MAEhEC,GADW9P,EAASO,MAAOP,EAASO,KACjBmP,EAAgB,cACzC,OACI,kBAAC,EAAD,KACI,kBAACT,GAAD,CAAcC,YAAaI,IAC3B,kBAACH,GAAD,KACI,kBAAC,GAAD,CAAWD,YAAaI,GAAxB,IAAsCE,EAAtC,KACA,kBAAC,GAAD,CAAcN,YAAaI,GAA3B,IAA2D,KAAlBI,GAAwBI,EAAjE,MAEJ,kBAAC,EAAD,CAAuBhB,QAASnP,KAAK0P,eAArC,iB,GA5BqBN,aA0CrCK,GAAuBW,aAAe,CACrC/P,SAAU,IAWIgQ,oBANf,SAAyB7P,GACxB,MAAO,CACLH,SAAUG,EAAMO,QAAQV,YAIZgQ,CAEbZ,ICtHa,mBAAEa,EAAF,EAAEA,WAAF,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAACC,EAAD,CAAsBC,KAAK,IAAIC,OAAK,EAACrP,UAAWwM,GAAgBtM,MAAOgP,IACvE,kBAACI,EAAD,CAAoBF,KAAK,iBAAiBC,OAAK,EAACrP,UAAWqO,GAAwBnO,MAAOgP,O,uPCdtG,IAUeK,GAVQ/O,IAAOC,IAAV,MCad+O,G,YAEJ,WAAYtP,GAAQ,IAAD,8BACjB,4CAAMA,KACDd,MAAQ,CACXqO,SAAU,IAHK,E,sEASjB,IAAMyB,EAAa,CACjBnQ,gBAAiBH,KAAKsB,MAAMnB,iBAK9B,OAFAO,QAAQC,IAAI,yBAA0B2P,GAGpC,kBAAC,GAAD,KACI,kBAACO,GAAD,CAAQP,WAAYA,S,GAnBZlB,aAgClBwB,GAAIR,aAAe,CAClBjQ,iBAAiB,GAWHkQ,oBANf,SAAyB7P,GACxB,MAAO,CACLL,gBAAiBK,EAAMD,eAAeJ,mBAI1BkQ,CAEbO,IChDFE,EAAQ,IAAUC,SAGY,eAA1BC,mHAAYC,YACZC,aAAaC,QAAQ,QAAS,iBAC9BC,EAAI9R,KAAK,qCAGb+R,IAAS7P,OACD,kBAAC,IAAD,CAAU+M,MAAOA,GACb,kBAAC,GAAD,OAEJ+C,SAASC,eAAe,SlBwG1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd9C,OAAM,SAAAtP,GACLkB,QAAQlB,MAAMA,EAAME,c","file":"static/js/main.bcf3a23f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Class created with Debug module (originally from Node.js but works in browsers to)to allow for more \n// precise logging through development\n// Note: Logging disabled in 'production' mode thanks to code in index.js in root of src folder\n\nimport debug from 'debug';\n\nconst BASE = 'spotify-app';\nconst COLOURS = {\n  trace: 'lightblue',\n  info: 'blue',\n  warn: 'pink',\n  error: 'red'\n}; // choose better colours :)\n\nclass Log {\n  generateMessage(level, message, source) {\n    // Set the prefix which will cause debug to enable the message\n    const namespace = `${BASE}:${level}`;\n    const createDebug = debug(namespace);\n    \n    // Set the colour of the message based on the level\n    createDebug.color = COLOURS[level];\n    \n    if(source) { createDebug(source, message); }\n    else { createDebug(message); }\n  }\n  \n  trace(message, source) {\n    return this.generateMessage('trace', message, source);\n  }\n  \n  info(message, source) {\n    return this.generateMessage('info', message, source);\n  }\n  \n  warn(message, source) {\n    return this.generateMessage('warn', message, source);\n  }\n  \n  error(message, source) {\n    return this.generateMessage('error', message, source);\n  }\n}\n\nexport default new Log();","// Reducer for authentication flow\nimport { \n    AUTHENTICATE_USER, \n    STORE_ACCESS_TOKEN,\n    REMOVE_ACCESS_TOKEN,\n    SIGN_OUT_USER,\n} from '../actionCreators/constants';\n\nconst initialState = {\n    isAuthenticated: false,\n    accessToken: ''\n}\n\nexport default function (state = initialState, action) {\n    console.log('Passing through authentication reducer');\n    switch(action.type) {\n        case AUTHENTICATE_USER:\n            return Object.assign({}, state, {isAuthenticated: action.isAuthenticated});\n        case STORE_ACCESS_TOKEN:\n            return Object.assign({}, state, {accessToken: action.accessToken});\n        case SIGN_OUT_USER:\n            return Object.assign({}, state, {isAuthenticated: action.isAuthenticated});\n        case REMOVE_ACCESS_TOKEN:\n            return Object.assign({}, state, {accessToken: action.accessToken});\n            \n        default:\n            return state;\n    }\n}","// Reducer that will contain all spotify related actions and states\n// ie. User's favorite album, personal data, currently playing song, playlist, etc.\n\nimport { STORE_USER_DATA } from '../actionCreators/constants';\n\nconst initialState = {\n    userData: false,\n}\n\nexport default function (state = initialState, action) {\n    console.log('Passing through authentication reducer');\n    switch(action.type) {\n        case STORE_USER_DATA:\n            return Object.assign({}, state, {userData: action.userData});\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport authentication from './authentication';\nimport spotify from './spotify';\n\nexport default combineReducers({\n    authentication,\n    spotify\n})","export const AUTHENTICATE_USER = 'AUTHENTICATE_USER';\nexport const STORE_ACCESS_TOKEN = 'STORE_ACCESS_TOKEN';\nexport const REMOVE_ACCESS_TOKEN = 'REMOVE_ACCESS_TOKEN';\nexport const SIGN_OUT_USER = 'SIGN_OUT_USER';\nexport const RETRIEVE_ARTIST = 'RETRIEVE_ARTIST';\nexport const RETRIEVE_SONGS = 'RETRIEVE_SONGS';\nexport const RETIEVE_SONG = 'RETIEVE_SONG';\nexport const RETRIEVE_ALBUM = 'RETRIEVE_ALBUM';\nexport const RETRIEVE_ALBUMS = 'RETRIEVE_ALBUMS';\nexport const SHUFFLE_PLAYLIST = 'SHUFFLE_PLAYLIST';\nexport const PLAY_NEXT_SONG = 'PLAY_NEXT_SONG';\nexport const PLAY_PREVIOUS_SONG = 'PLAY_PREVIOUS_SONG';\nexport const PLAY_SONG = 'PLAY_SONG'; // Necessary to go from main menu to song display\nexport const PLAY_ALBUM = 'PLAY_ALBUM';\nexport const GO_BACK_TO_MENU = 'GO_BACK_TO_MENU';\nexport const PAUSE_SONG = 'PAUSE_SONG';\nexport const STORE_USER_DATA = 'STORE_USER_DATA';","// Initialization of Redux Store\n\n// External Packages\nimport { createStore } from 'redux';\n// Internal Modules\n// Redux\nimport reducer from '../reducers/index';\n\nexport default createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() // eslint-disable-line\n);\n\n","// Authenticated Route\n// Component similar to the AppliedRoute component. Main difference is that we look at props \n// passed in to check if a user is authenticated, then we render the passed in component.\n// If user is not authenticated, we use Redirect React Router component to redirect the user\n// to the login page\n\n// External Packages\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n// Authenticated Route set up to redirect to /admin page if user is not authenticated\nexport default ({ component: C, props: cProps, ...rest }) =>\n  <Route\n    {...rest}\n    render={props =>\n      cProps.isAuthenticated\n        ? <C {...props} {...cProps} />\n        : <Redirect\n            to=\"/\"\n          />}\n  />;\n","// Unauthenticated Route \n// Similar to AuthenticatedRoute component created in this directory. We check to ensure\n// that the user is not authenticated before we render the component that is passed in.\n// If the user is, then we use <Redirect /> component to redirect the user to the homepage\n\n// External Packages\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default ({ component: C, props: cProps, ...rest }) =>\n  <Route\n    {...rest}\n    render={props =>\n      !cProps.isAuthenticated\n        ? <C {...props} {...cProps} />\n        : <Redirect to=\"/authenticated\" />} \n  />;\n","import {\n    AUTHENTICATE_USER,\n    STORE_USER_DATA,\n    STORE_ACCESS_TOKEN,\n    REMOVE_ACCESS_TOKEN,\n    SIGN_OUT_USER,\n} from './constants';\n\nexport const authenticateUser = (state) => ({\n    type: AUTHENTICATE_USER,\n    isAuthenticated: true\n})\n\nexport const signOutUser = (state) => ({\n    type: SIGN_OUT_USER,\n    isAuthenticated: false\n})\n\n\nexport const storeUserData = (state) => ({\n    type: STORE_USER_DATA,\n    userData: state\n})\n\nexport const storeAccessToken = (state) => ({\n    type: STORE_ACCESS_TOKEN,\n    accessToken: state\n})\n\nexport const removeAccessToken = (state) => ({\n    type: REMOVE_ACCESS_TOKEN,\n    accessToken: ''\n})","// As the name suggests\n\nimport styled from 'styled-components';\n\nconst NeumorphicLoginWrapper = styled.div`\n    width: 230px;\n    height: 400px;\n    padding: 60px 35px 35px 35px;\n    border-radius: 40px;\n    box-shadow: 13px 13px 20px #CBCED1, -13px -13px 20px #FFFFFF;\n    background-color: #ECF0F3;\n    display: flex;\n    flex-direction: column;\n`\n\n// #EBECF1\n\nexport default NeumorphicLoginWrapper;","import styled from 'styled-components';\n\nconst NeumorphicLoginButton = styled.button`\n    outline: none;\n    border: none;\n    cursor: pointer;\n    width: 80%;\n    height: 40px;\n    border-radius: 30px;\n    font-size: 16px;\n    font-weight: 700;\n    font-family: LatoRegular, sans-serif;\n    color: #FFF;\n    text-align: center;\n    box-shadow: 3px 3px 8px #B1B1B1, -3px -3px 8px #FFFFFF;\n    transition: 0.5s;\n    margin: 0 auto;\n    margin-top: 150px;\n    background: #7CE199;\n    &:hover {\n        background: #96fab3;\n    }\n    &:active {\n        background: #74c28b;\n    };\n`\n\nexport default NeumorphicLoginButton;","// Utility library for Spotify functions\n\nimport axios from 'axios';\n\n// TO DO:\n// Check every function works correctly with and without all the parameters.\n// See if there's any way to do function overloading to avoid having to call function with undefined\n// Fix \"Important issue\"\n// Document each function's params, restrictions, and add link to spotify web api\n// Maybe add error logging if values are incorrect? \n\n\n// General notes:\n// 403 errors will be returned if you do not have user's authorization so change the list of permissions\n// if you get that error\n// \n//\n//\n\n// Albums: Done\n// Artists: Done\n// Browse: DONE\n    // GetCategory: Done x redone\n    // GetCategoryPlaylists: Done x redone\n    // GetListOfCategories: Done\n    // GetListOfFeaturedPlaylists: Done\n    // GetListOfNewReleases: Done\n    // GetRecommendations: Done but incomplete\n// EPISODE: Endpoints for retrieving information about one or more episodes from the Spotify catalog\n    // GetEpisode: Done\n    // GetSeveralEpisodes: Done\n// Follow: UNSURE BUT DONE\n    // checkIfUserFollows: Done\n    // checkIfFollowsPlaylist: Done\n    // followArtistsOrUsers: Done\n    // followPlaylist: Done\n    // getUserFollowedArtist: Done\n    // unfollowArtistOrUser: Done\n    // unfollowPlaylist: Done\n// Library: next\n    // checkIfAlbumSaved: Done\n    // checkIfShowSaved: Done\n    // checkIfTrackSaved: Done\n    // getUserSavedAlbums: Done\n    // getUserSavedShows: Done\n    // getUserSavedTracks: Done\n    // removeAlbumsFromUser: done\n    // removeShowFromUser (plural?): done\n    // removeTracks: done\n    // saveAlbums: done\n    // saveShows: done\n    // saveTracks: done\n// PERSONALIZATION: DONE\n    // getUserTopTracks: Done\n// PLayer\n    // getUserDevices\n    // getDataOnCurrentPlayback\n    // getRecentlyPlayedTracks\n    // getCurrentlyPlayedTrack\n    // pauseUserPlayback\n    // seekToPositionInPlayback\n    // setPlaybackOnRepeat\n    // setVolumeForUserPlayback\n    // skipToNextTrack\n    // skipToPreviousTrack\n    // startUserPlayback\n    // toggleShuffleForUserPlayback\n    // transferUserPlayback\n// Playlists\n    // addTrackToPlaylist: done\n    // changePlaylistDetails: done\n    // getListOfCurrentUserPlaylists: done\n    // getListOfUserPlaylist: done\n    // getPlaylist: done\n    // getPlaylistCover: done\n    // getPlaylistTracks: done\n    // removeTracksFromPlaylist: done\n    // reorderPlaylistTracks: done\n    // replacePlaylistTracks: done\n    // uploadPlaylistCover: done\n// Search : next\n// Shows : Done\n    // getShowData: done\n    // getSeveralShowsData: done\n    // getShowEpisodes: done\n// Tracks: almost\n    // getTrackAnalysis: done\n    // getTrackFeatures: done\n    // getSeveralTrackFeatures: done\n    // getSeveralTrackData: almost\n    // getTrackData: done\n// Users profile: done\n    // getCurrentUserProfile: done\n    // getUserProfile: done\n\n// https://dev.to/thomasstep/splitting-javascript-classes-into-different-files-359g\n// https://github.com/neogeek/doxdox#layouts\n\n\nclass SpotifyAPI {\n    constructor(accessToken) {\n        this.accessToken = accessToken\n    }\n\n    // Behavior of API\n    // Seems to respond with standard behavior when the body parameters that we pass have\n    // undefined values (when no arguments were passed in the function call and even when the \n    // argument passed itself is undefined)\n    // Let's see how it responds when the type of variable itself is erroneous (e.g. string instead\n    // of integer or integer instead of string)\n    // Seems to behave the same way when we pass undefined as when we pass nothing, which confirms\n    // expectations\n    // 400 bad request response status code when wrong variable type is inputted\n    // The server cannot and will not process the request due to something perceived\n    // as an error on the client side (e.g., malformed request syntax, etc.)\n\n\n    // Gets a Category\n    // @params: categoryID {string} (required): spotify category ID for the category. e.g. \"party\"\n    // @params: country {string} (optional): ISO 3166-1 alpha-2 country code. provide it to ensure categ exists for a country\n    // @params: locale {string} (optional): desired language consisting of ISO 639-1 language code and ISO 3166 country code\n    // @example:\n    // .getCategory(\"party\") --> gets the single category \"party\" used to tag items in spotify\n    // .getCategory(\"party\", undefined, \"es_MX\") --> gets category returned in \"Spanish (Mexico)\"\n    // @returns an object containing the category information\n    //\n\n    getCategory = async (categoryID, paramObject) => {\n        let category;\n\n        // let paramObject = {\n        //     country: country,\n        //     locale: locale\n        // };\n\n        try {\n            let url = 'https://api.spotify.com/v1/browse/categories/' + categoryID;\n            category = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: paramObject\n            })\n        } catch (error) {\n            console.error('Error returned from Spotify-API in getCategory function', error);\n        }\n\n        return category; \n    }\n\n\n    //\n    // Gets list of Spotify playlists tagged with a particular category\n    // @params {string} categoryID (required) Spotify category ID for the category\n    // @param {Object} paramObject [options] Object that can contain up to three optional keys: country, limit,\n    // and offset. \"country\" should be a string string representing ISO 3166-1 alpha-2 country code.\n    // limit should be an integer representing the max number of items to return. (default: 20, min: 1, max: 50).\n    // offset should be an integer, representing the index of the first item to return (default: 0). \n    // @example:\n    // .getCategoryPlaylists(\"party\", {limit: 20}) --> Gets first 20 spotify \"party\" playlists\n    // .getCategoryPlaylists(\"party\", {offset: 20, country: 'FR'}) --> Gets party playlists 20-40 from France\n    // @return {Object} An object containing playlists for that category\n    // \n    getCategoryPlaylists = async (categoryID, paramObject) => {\n        let categoryPlaylists;\n\n        // let paramObject = {\n        //     country: country,\n        //     limit: limit,\n        //     offset: offset\n        // }\n\n        try {\n            let url = 'https://api.spotify.com/v1/browse/categories/';\n            \n            categoryPlaylists = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: paramObject\n            })\n        } catch (error) {\n            console.error('Error returned from Spotify-API in getCategoryPlaylists function', error);\n        }\n\n        console.log('Category Playlists are', categoryPlaylists);\n        return categoryPlaylists; \n    }\n\n\n    // \n    // Get a list of categories used to tag items in Spotify\n    // Link: https://developer.spotify.com/documentation/web-api/reference/browse/get-list-categories/\n    // @params: country {string} (optional): ISO 3166-1 alpha-2 country code\n    // @params: locale {string} (optional): ISO 639-1 language code with ISO 3166-1 alpha-2 country code. e.g. \"es_MX\"\n    // @params: limit {integer} (optional): max num of categories to return. default: 20, min: 1, max: 50.\n    // @params: offset {integer} (optional): index of first item. default: 0 (first object). \n    // @example:\n    // .getListOfCategories(undefined, undefined, 20, 20) --> Get 20 categories offset by 20 (so categories number 20-40)\n    // .getListOfCategories(\"FR\") ==> equivalent to: .getListOfCategories(\"FR\", undefined, undefined, undefined) --> Gets default number of categories (20) for France\n    // @returns an Object containing a list of categories\n    // \n    getListOfCategories = async (country, locale, limit, offset) => {\n        let listOfCategories;\n\n        let paramObject = {\n            country: country,\n            locale: locale,\n            limit: limit,\n            offset: offset,\n        }\n\n        try {\n            let url = 'https://api.spotify.com/v1/browse/categories/'\n            \n            listOfCategories = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: paramObject\n            })\n        } catch (error) {\n            console.error('Error returned from Spotify-API in getListOfCategories function', error);\n        }\n\n        console.log('Categories  are', listOfCategories);\n        return listOfCategories; \n    }\n    //\n    // Retrieves New Releases\n    // @params: limit {integer} (optional): number of releases to be retrieved. default: 20, min: 1, max: 50.\n    // @params: country {string} (optional): an ISO 3166-1 alpha-2 country code. \n    // @params: offset {integer} (optional): the index of the first item to return. Default: 0\n    // @example: \n    // .getNewReleases(10) --> Returns 10 first newest releases for all countries <=> equivalent to .getNewReleases(10, undefined, undefinded)\n    // .getNewReleases(undefined, 'FR', 10) --> Gets top 10-30 newest track for France (ISO code: \"FR\")\n    // .getNewReleases(10, undefined, 10) --> Gets # 10 to 20 newest release all over the world (10 is limit and offset is 10 so we start at track 10)\n    // @returns An object newReleases containing the newest releases if the call to the API is successful \n    // \n    getNewReleases = async (limit, country, offset) => {\n        \n        try {\n            let newReleases;\n\n            let paramObject = {\n                country: country,\n                limit: limit,\n                offset: offset,\n            }\n   \n    \n            try {\n                let url = 'https://api.spotify.com/v1/browse/new-releases'\n                newReleases = await axios.get(url, {\n                    headers: {\n                        'Authorization': 'Bearer ' + this.accessToken\n                    },\n                    params: paramObject\n                })\n            } catch (error) {\n                console.error('Error returned from Spotify-API in GetNewReleases function', error);\n            }\n            console.log('New releases are', newReleases);\n            return newReleases; \n        } catch (error) {\n            console.error('Error found in GetNewReleases function: ', error)\n        }\n\n    }\n\n    // \n    // Retrieve list of Spotify featuerd playlists\n    // @params: locale {string} (optional): desired language as lowercase ISO 639-1 language code & uppercase ISO 3166-1 alpha-2\n    // country code. e.g. es_MX --> \"Spanish (Mexico)\"\n    // @params: country {string} (optional): ISO 3166-1 alpha-2 country code. if you want a list\n    // of returned items to be relevant to a particular country. e.g. \"FR\"\n    // @params: timestamp {string} (optional): ISO 8601 format --> yyyy-MM--ddTHH:mm:ss to get results\n    // tailed for that specific time and day\n    // @params: limit {integer} (optional): max num of items to return. default: 20, min: 1, max: 50.\n    // @params: offset {integer} (optional): index of first item to return. default 0.\n    // @returns: a featuredPlaylists object containing all the necessary data :)\n    //\n    getFeaturedPlaylists = async (locale, country, timestamp, limit, offset) => {\n        let featuredPlaylists;\n\n        let paramObject = {\n            locale: locale,\n            country: country,\n            timestamp: timestamp,\n            limit: limit,\n            offset: offset,\n        }\n\n        try {\n            let url = 'https://api.spotify.com/v1/browse/featured-playlists';\n            featuredPlaylists = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: paramObject\n            })\n        } catch (error) {\n            console.error('Error returned from Spotify-API in getFeaturedPlaylists function', error);\n        }\n        console.log('New releases are', featuredPlaylists);\n        return featuredPlaylists; \n\n    }\n\n    // Important: add max_*, min_*, etc?\n\n    // Get Recommendations from Seed Data\n    // Link: https://developer.spotify.com/documentation/web-api/reference/browse/get-recommendations/\n    // @params: limit {integer} (optional): target size of the list of recommended tracks. default: 20, min: 1, max: 100.\n    // @params: market {string} (optional): ISO 3166-1 alpha-2 country code. \n    // @params: seedArtists {string} (required): comma separated list of spotify artists. up to 5 seed values.\n    // @params seedGenres {string} (required): comma-separated list of any genres in teh set of available genre seeds.\n    // up to 5 seed values.\n    // @params: seedTracks {string} (required): comma-separed list of spotify IDs for a seed track. Up to 5 values.\n    // @returns: recommendations object containing all of the recommendation data\n    // Note: Only one type of seed data is required at minimum (e.g. seed_artists or seed_genres) but a combination\n    // of all of them can be used together\n    getRecommendations = async (limit, market, seedArtists, seedGenres, seedTracks) => {\n        let recommendations;\n        let paramObject = {\n            limit: limit,\n            market: market,\n            seed_artists: seedArtists,\n            seed_genres: seedGenres,\n            seed_tracks: seedTracks,\n        } \n        try {\n            let url = 'https://api.spotify.com/v1/recommendations'\n            recommendations = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: paramObject\n            })\n        } catch (error) {\n            console.error('Error caught in getRecommendations function', error);\n        }\n        console.log('New recommendations are', recommendations);\n        return recommendations; \n    }\n\n    // Get Featured Playlist\n    getFeaturedPlaylist = async (locale, country, timestamp, limit, offset) => {\n        let featuredPlaylist;\n        let paramObject = {\n            local: locale,\n            country: country,\n            timestamp: timestamp,\n            limit: limit,\n            offset: offset,\n        };\n\n        try {\n            let url = 'https://api.spotify.com/v1/https://api.spotify.com/v1/browse/featured-playlists';\n            featuredPlaylist = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: paramObject\n            })\n        } catch (error) {\n            console.error('Error caught in getFeaturedPlaylist function', error);\n        }\n        console.log('featuredPlaylist are', featuredPlaylist);\n        return featuredPlaylist; \n    }\n\n    // ALBUM RELATED METHODS\n\n    // \n    // Retrieves specific album's data\n    // Link: https://developer.spotify.com/documentation/web-api/reference/albums/get-album/\n    // @params: albumID  {string} (required): spotify's ID for the album\n    // @params: market {string} (optional): ISO 3166-1 alpha-2 country code\n    // @returns: album object containing all album data\n    //\n    getAlbum = async (albumID, market) => {\n        let album;\n        let bodyParam = {\n            market: market\n        }\n        try {\n            let url =  'https://api.spotify.com/v1/albums/'+ albumID\n            album = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: bodyParam\n            });\n        } catch(error) {\n            console.error('Error caught in the GetAlbum function', error);\n        }\n        return album;\n    }\n\n    //\n    // Get tracks for an album\n    // Link: https://developer.spotify.com/documentation/web-api/reference/albums/get-albums-tracks/\n    // @params: albumID {string} (required) \n    // @params: limit {integer) (optional): max number of trackss to return. default = 20, min = 1, max = 50. \n    // @params: offset {integer} (optional): the index of the first track to return. default 0.\n    // @params: market {string} (optional): an ISO 3166-1-alpha-2 country code (string)\n    // @returns: an albumTracks object containing all of the album's track data\n    // \n    getAlbumTracks = async (albumID, limit, offset, market) => {\n        let albumTracks;\n        let bodyParam = {\n            limit: limit,\n            offset: offset,\n            market: market\n        }\n        try {\n            let url =  'https://api.spotify.com/v1/albums/' + albumID + '/tracks'\n            albumTracks = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: bodyParam\n            })\n        } catch(error) {\n            console.error('Error caught in the Get Album Tracks function');\n        }\n        return albumTracks;\n    }\n\n    //```\n    // Retrieves information about several albums\n    // Link:https://developer.spotify.com/documentation/web-api/reference/albums/get-several-albums/\n    // @params: albumIdStrings {string} (required): comma-separated list of the spotify IDs for the album. max = 20.\n    // @params: market {string} (optional): An ISO 3166-1 alpha-2 country code\n    // @returns: albumIDs object containing all of the albums' data \n    // \n    getAlbums = async (albumIdStrings, market) => {\n        let albumIDs;\n        let bodyParam = {\n            ids: albumIdStrings,\n            market, market\n        }\n        try {\n            let url =  'https://api.spotify.com/v1/albums'\n            albumIDs = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: bodyParam\n            })\n        } catch(error) {\n            console.error('Error caught in the Get Album IDs function');\n        }\n        return albumIDs;\n    }\n\n    getArtist = async (artistID) => {\n        let artistData;\n        try {\n            let url =  'https://api.spotify.com/v1/artists/' + artistID\n            artistData = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                }\n            })\n        } catch(error) {\n            console.error('Error caught in the GetArtist function', error);\n        }\n        return artistData;\n    }\n\n    // Include-groups is a comma separated list of keywords that are used to filter the response\n    // if not supplied, all album types will be returned. Valid values are: \"album\", \"single\", \"appears_on\",\n    // \"compilation\"\n    getArtistAlbums = async (artistID, includeGroups, country, limit, offset) => {\n        let artistAlbums;\n        let bodyParam = {\n            include_groups: includeGroups, \n            country: country,\n            limit: limit,\n            offset: offset\n        }\n        try {\n            let url =  'https://api.spotify.com/v1/artists/' + artistID + '/albums';\n            artistAlbums = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: bodyParam\n            })\n        } catch(error) {\n            console.error('Error caught in the getArtistAlbums function', error);\n        }\n        return artistAlbums;\n    }\n\n    // Important : change bodyParam to queryParam\n    getArtistTopTracks = async (artistID, country) => {\n        let artistTopTracks;\n        let queryParam = {\n            country: country\n        }\n        try {\n            let url =  'https://api.spotify.com/v1/artists/' + artistID + '/top-tracks';\n            artistTopTracks = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch(error) {\n            console.error('Error caught in the getArtistTopTracks function', error);\n        }\n        return artistTopTracks;\n    }\n\n    // https://developer.spotify.com/documentation/web-api/reference/artists/get-related-artists/\n    getRelatedArtists = async (artistID) => {\n        let relatedArtists;\n        try {\n            let url =  'https://api.spotify.com/v1/artists' + artistID + '/related-artists';\n            relatedArtists = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                }\n            })\n        } catch(error) {\n            console.error('Error caught in the getRelatedArtists function', error);\n        }\n        return relatedArtists;\n    }\n\n    // https://developer.spotify.com/documentation/web-api/reference/artists/get-several-artists/\n    // Important: or getArtists \n    // ids: comma-sepaarated list of the Spotify-IDs for the artsits. MAximum 50 IDs.\n    getSeveralArtists = async (artistIDs) => {\n        let artistsData;\n        let queryParam = {\n            ids: artistIDs\n        }\n\n        try {\n            let url =  'https://api.spotify.com/v1/artists';\n            artistsData = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch(error) {\n            console.error('Error caught in the getSeveralArtists function', error);\n        }\n        return artistsData;\n    }\n\n    // \n    // getEpisode()\n    //\n    // Gets Spotify catalog info for a single episode identified by its unique Spotify ID\n    // Link: https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/\n    //\n    // @params: episodeID {string} (required): based 64 identifier representing the spotify ID for the episode\n    // @params: market {string} (required): an ISO 3166-1 alpha-2 country code. \n    // If a country is specified, only shows and episodes available in that country are returned\n    // If a valid user access token is specified in the request header, the country associated w/ theuser account will \n    // take priority over this parameter\n    //\n    // @returns an object containing information about the specified episode (duration, description, images, etc.)\n    // \n    getEpisode = async(episodeID, market) => {\n        let episodeData;\n\n        let queryParam = {\n            market: market\n        }\n\n        try {\n            let url = 'https://api.spotify.com/v1/episodes/' + episodeID;\n            episodeData = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch(error) {\n            console.error('Error caught in getEpisode function', error);\n        }\n        \n        console.log('Episode data',episodeData);\n        return episodeData\n    }\n\n\n    // \n    // getSeveralEpisodes()\n    //\n    // Gets Spotify catalog information for multiple episodes based on their Spotify ID\n    // Link: https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/\n    //\n    // @params: ids {string} (required): comma-separated list of Spotify IDs for teh episodes. max: 50 IDs.\n    // @params: market {string} (optional): ISO 3166-1 alpha-2 country code: If country code is specified, only shows and epsiodes available\n    // in that market will be returned. same other rules apply as in .getEpisode method.\n    // More info can be found in the above link\n    // \n    // @returns an object contain the several episode's respective information\n    //\n    getSeveralEpisodes = async(listOfEpisodeIDs, market) => {\n        let severalEpisodeData;\n\n        let queryParam = {\n            ids: listOfEpisodeIDs,\n            market: market\n        }\n\n        try {\n            let url = 'https://api.spotify.com/v1/episodes/';\n            severalEpisodeData = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch(error) {\n            console.error('Error caught in getSeveralEpisodes function', error);\n        }\n        \n        console.log('Several episodes data', severalEpisodeData);\n        return severalEpisodeData\n    }\n\n    //\n    // getUserTop()\n    // \n    // Gets the current user's top artists or tracks based on calculated affinity\n    // Link: https://developer.spotify.com/documentation/web-api/reference/personalization/get-users-top-artists-and-tracks/\n    //\n    // @params: type {string} (required): Only two options \"artists\" or \"tracks\"\n    // @params: limit {integer} (optional): Num of entities to return. Default: 20, min: 1, max: 50.\n    // @params: offset {integer} (optional): Index of first entity to return. Default: 0 (the first track)\n    // @params: timeRange {string} (optional): over what time frame affinities are computed.\n    // Valid values include \"long_term\" (several years of data), \"medium_term\" (-6 months of data), \"short_term\" (-4 weeks)\n    // \n    // @example:\n    // .getUserTop(\"artists\", 30) --> Get's user's top 30 artists\n    // .getUserTop(\"tracks\", 40, undefined, \"short_term\") --> Get's user's top 40 tracks over past 4 weeks\n    // .getUserTop(\"tracks\", undefined, undefined, \"long_term\") --> Gets user's top tracks over past several years\n    // .getUserTop(\"artists\") --> Get's user's top artists over medium_term (which is default value)\n    //\n    // @returns an object containing top user track's or artists\n    // \n    getUserTop = async (type, paramObject) => {\n        let userTopTracks;\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/top/' + type;\n            userTopTracks = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: paramObject\n            })\n        } catch(error) {\n            console.error(`Error caught in getUserTopTracks function: ${error}`)\n        }\n\n        return userTopTracks;\n    }\n\n    // Playlists API Endpoints //\n\n    /*\n    * Add Tracks to a Playlist\n    * More details at [Add Tracks to a Playlist](https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/)\n    * \n    * @param {string} playlistID Spotify ID for the playlist\n    * @param {Array<string>} trackIDArray [options] Array of track ID strings\n    * @param {Object} [options] paramObject Optional param object that contains a \"position\" attribute, which is an integer\n    * representing the position where to insert the tracks. Uses zero-based index, so position = 0 is equivalent to inserting \n    * tracks in the first position \n    * \n    * @return {Object} Object with status code 201 in the response header for created. Trying to add track when you don't have\n    * user permissions or when there are more than 10,000 tracks in playlist returns error 403.\n    */\n    addTracksToPlaylist = async(playlistID, trackIDArray, paramObject) => {\n        let addTrackResponse;\n\n\n        let queryParam = {\n            uris: trackIDArray.join(','),\n            position: paramObject == undefined ? undefined : paramObject.position,\n        }\n        // Or post?\n\n        try {\n            let url = `https://api.spotify.com/v1/playlists/${playlistID}/tracks`;\n            addTrackResponse = await axios.post(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch(error) {\n            console.error(`Error caught in addTracksToPlaylist function ${error}`);\n        }\n        return addTrackResponse;\n    }\n\n    /*\n    *\n    * Change Playlist's Details\n    * More details [here](https://developer.spotify.com/documentation/web-api/reference/playlists/change-playlist-details/)\n    * \n    * @param {string} playlistID Spotify ID of the playlist\n    * @param {Object} optionalParam Optional object that can contain up to four attributes: name (string), public (boolean), collaborative(boolean)\n    * and description (string). name is the new name for teh playlist, setting public to true will make the playlist public, setting it to false will make\n    * it private. setting collaborative to true will make the playlist collaborative. finally, adding a description will change the description of the playlist.\n    * \n    * @return {Object} Object with status code 200 if successful. Error object if unsuccessful. \n    * \n    */\n\n    changePlaylistDetails = async (playlistID, optionalParam) => {\n        let responseObject;\n\n        try {\n            let url = `https://api.spotify.com/v1/playlists/${playlistID}`;\n            responseObject = await axios.put(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                    'Content-Type': 'application/json',\n                },\n                data: {\n                    name: optionalParam != undefined && optionalParam.name ? optionalParam.name : undefined,\n                    public: optionalParam != undefined && optionalParam.public ? optionalParam.public : undefined,\n                    collaborative: optionalParam != undefined && optionalParam.collaborative ? optionalParam.collaborative : undefined,\n                    description: optionalParam != undefined && optionalParam.description ? optionalParam.description : undefined,\n                }\n            })\n        } catch (error) {\n            return error;\n        }\n        return responseObject;\n    }\n\n    /*\n    *\n    * Create a Playlist\n    * More details [here](https://developer.spotify.com/documentation/web-api/reference/playlists/create-playlist/)\n    * \n    * @param {string} userID User's Spotify ID\n    * @param {string} name Name for the new playlist. E.g. \"Calabasas Banger$ Playlist\"\n    * @param {Object} [options] Optional object that can contain up to three attributes: public (boolean), collaborative(boolean) and \n    * description (string). setting public to true will make the playlist public, setting it to false will make  it private. setting\n    * collaborative to true will make the playlist collaborative. finally, adding a description will change the description of the \n    * playlist.\n    * \n    * @return {Object} Containing the playlist object in JSON format and status code 200 or 201 (created) if request successful.\n    * Error object returned if unsuccessful.\n    * \n    */\n\n    createPlaylist = async (userID, name, optionalParam) => {\n        let responseObject;\n        try {\n            let url = `https://api.spotify.com/v1/users/${userID}/playlists`;\n            responseObject = await axios.post(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                    'Content-Type': 'application/json',\n                },\n                data: {\n                    name: name,\n                    public: optionalParam != undefined && optionalParam.public ? optionalParam.public : undefined,\n                    collaborative: optionalParam != undefined && optionalParam.collaborative ? optionalParam.collaborative : undefined,\n                    description: optionalParam != undefined && optionalParam.description ? optionalParam.description : undefined,\n                }\n            })\n        } catch (error) {\n            return error;\n        }  \n        return responseObject;\n    } \n\n\n    /*\n    * Get a List of Current User's Playlists\n    * More details at [Get List of Current User's Playlist](https://developer.spotify.com/documentation/web-api/reference/playlists/get-a-list-of-current-users-playlists/)\n    * \n    * @param {Object} [optional] Optional object that can contain up to two attributes \"limit\", an integer representing the max number of playlists to return \n    * (max: 50, default: 20, min: 1) and \"offset\", which is the index of the first playlist to return (Default: 0, Max offset: 100,000)\n    * \n    * @return {Object} Object with status code 200 OK in response header and response body contains an array of simplified playlist objects in JSON format\n    * \n    */\n   getCurrentUserPlaylist = async (paramObject) => {\n        let currentUserPlaylist;\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/playlists'\n            currentUserPlaylist = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: paramObject \n            })\n        } catch (error) {\n            console.error(`Error found in getCurrentUserPlaylist function ${error}`)\n        }\n        return currentUserPlaylist;\n   }\n\n    /*\n    * Get a List of Public User's Playlists\n    * More details at [Get List of User's Playlist](https://developer.spotify.com/documentation/web-api/reference/playlists/get-list-users-playlists/)\n    * \n    * @param {Object} [optional] Optional object that can contain up to two attributes \"limit\", an integer representing the max number of playlists to return \n    * (max: 50, default: 20, min: 1) and \"offset\", which is the index of the first playlist to return (Default: 0, Max offset: 100,000)\n    * \n    * @return {Object} Object with status code 200 OK in response header and response body contains an array of simplified playlist objects in JSON format\n    * \n    */\n   getUserPlaylist = async (userID, paramObject) => {\n        let userPlaylist;\n\n        try {\n            let url = `https://api.spotify.com/v1/users/${userID}/playlists`\n            userPlaylist = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: paramObject \n            })\n        } catch (error) {\n            console.log(`Error found in getUserPlaylist function ${userPlaylist}`)\n        }\n        return userPlaylist;\n   } \n\n   /*\n   *\n   * Get Playlist \n   * More details can be found at [Get a Playlist](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist/)\n   * \n   * @param {string} playlistID Spotify ID for the playlist\n   * @param {Object} paramObject [options] Optional object that can contain up to three attributes 1. \"fields\" (string), which is a comma-separated\n   * list of the fields to return. e.g. 'descriptio, uri'., 2. 'market' (string), represneting an ISO 3166-1 alpha-2 country code,\n   * and 3. \"additional_types\", which is a comma-separated list of item types that your client supports (valid types are 'track' and 'episode')\n   * \n   * @return {Object} An object which contains a playlist object in JSON format and HTTP status code in header 200 if response successful.\n   * \n   */\n   getPlaylist = async (playlistID, paramObject) => {\n       let playlist;\n\n       try {\n           let url = `https://api.spotify.com/v1/playlists/${playlistID}`\n           playlist = await axios.get(url, {\n            headers: {\n                'Authorization': 'Bearer ' + this.accessToken\n            },\n            params: paramObject \n        })\n       } catch (error) {\n           console.log(`Error found in getPlaylist function ${error}`)\n       }\n       return playlist;\n   }\n\n\n   /*\n   * Get a Playlist Cover Image\n   * More details can be found at [Get a Playlist Cover Image](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/)\n   * \n   * @param {string} playlistID Spotify ID for the playlist\n   * \n   * @return {Object} A list of image objects in JSON format if request successful. Object with error code in header and error object if unsuccessful.\n   */\n   getPlaylistCoverImage = async (playlistID) => {\n        let playlistImage;\n\n        try {\n            let url = `https://api.spotify.com/v1/playlists/${playlistID}/images`\n            playlistImage = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                }\n            })\n        } catch (error) {\n            console.error(`Error found in getPlaylistCoverImage function ${error}`);\n        }\n        return playlistImage;\n   }\n\n\n   /*\n   *\n   * Get a Playlist's tracks\n   * More details can be found at [Get a Playlist's Tracks]()\n   * \n   * @param {string} playlistID Spotify ID for the playlist\n   * @param {Object} queryParam Objec containingoptional parameters that can be passed in, including\n   * \"fields\", \"limit\", \"offset\", \"market\", \"additional_types\"\n   * @example\n   * .getPlaylistTracks('21THa8j9TaSGuXYNBU5tsC', {limit: 50}) --> Gets 50 tracks from passed in playlist\n   * \n   * @return {Object} On success, response body contains an arra of track objects and episode objects (depending on additional_types parameter)\n   * On error code, error code in header and error object in response body.\n   * \n   */\n   getPlaylistTracks = async (playlistID, queryParam) => {\n       let playlistTracks;\n\n       try {\n            let url = `https://api.spotify.com/v1/playlists/${playlistID}/tracks`\n            playlistTracks = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch (error) {\n           console.error(`Error encountered in getPlaylistTracks function ${error}`);\n       }\n       return playlistTracks;\n   }\n\n\n   /*\n   *\n   * Remove Track From Playlist\n   * More details can be found at [Remove Track From Playlist]\n   * \n   * @param {string} playlistID Spotify ID of the playlist\n   * @param {Array<string>} trackURIArray Array of the track's URIs e.g. [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\" ]\n   * \n   * @return An object containing \"snapshot_id\" in JSON format and success status 200 if successful.\n   * \"snapshot_id\" can be used to identify playlsit version in future requests.  If bad request, 400 returned,\n   * if forbidden request, 403 returned in error object.\n   */\n   removeTracksFromPlaylist = async (playlistID, trackURIArray) => {\n        let responseObject;\n        let newTrackArray = trackURIArray.map((uri) => {\n            if (typeof uri === 'string') {\n                return {uri: uri};\n            } else {\n                return uri;\n            }\n        })\n\n        try {\n            let url = `https://api.spotify.com/v1/playlists/${playlistID}/tracks`;\n            responseObject = await axios.delete(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                    'Content-Type': 'application/json',\n                },\n                data: {\n                    tracks: newTrackArray\n                }\n            })\n        } catch (error) {\n            console.error(`Error encountered in removeTrackFromPlaylist ${error} `)\n        }\n        return responseObject;\n   }\n\n   /*\n   *\n   * Reorder a Playlist's Tracks\n   * More information can be found at [Reorder a Playlist's Tracks](https://developer.spotify.com/documentation/web-api/reference/playlists/reorder-playlists-tracks/)\n   * \n   * @param {string} playlistID Spotify ID for the playlist\n   * @param {integer} rangeStart Position of the first track to be reordered\n   * @param {integer} insertBefore Position where the track/tracks should be inserted.\n   * @param {Object} optionalParam Optional object that can contain up to two attributes: 'insertBefore' and 'snapshotID'.\n   * 'insertBefore' represents the position (integer) where the track/tracks should be inserted. 'snapshotId' represents the playlist's\n   * snapshotID (string) against which you want to make changes\n   * \n   * @return {Object} Containing a snapshot_id in JSON format and the HTTP status code in response header is 200 OK. If error, error object returned.\n   */\n\n  // #toDo: change all optional parameters to optionalParam\n\n   reorderPlaylistTracks = async (playlistID, rangeStart, insertBefore, optionalParam) => {\n       let responseObject;\n       try {\n           let url = `https://api.spotify.com/v1/playlists/${playlistID}/tracks`;\n           responseObject = await axios.put(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                    'Content-Type': 'application/json',\n                },\n                data: {\n                    range_start: rangeStart,\n                    insert_before: insertBefore,\n                    range_length: optionalParam != undefined && optionalParam.rangeLength ? optionalParam.rangeLength : undefined,\n                    snapshot_id: optionalParam != undefined && optionalParam.snapshotID ? optionalParam.snapshotID : undefined,\n                }\n           })\n       } catch (error) {\n           console.error(`Error encountered in reorderPlaylistTracks ${responseObject}`);\n       }\n       return responseObject;\n    }\n\n    /*\n    *\n    * Replace a Playlist's Tracks\n    * More details [here](https://developer.spotify.com/documentation/web-api/reference/playlists/replace-playlists-tracks/)\n    * \n    * @param {string} playlistID Spotify ID for the playlist\n    * @param {Array<string>} trackURIArray Array of track URIs that will be in the playlist selected\n    * \n    * @response {Object} With status code 201 in header if successful. Error object with error code returned if unsuccessful.\n    * \n    */\n    replacePlaylistTracks = async (playlistID, trackURIArray) => {\n        let responseObject;\n\n        let queryParam = {\n            uris: trackURIArray.join(',')\n        }\n\n        try {\n            let url = `https://api.spotify.com/v1/playlists/${playlistID}/tracks`;\n            responseObject = await axios.put(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch (error) {\n            return error;\n        }\n        return responseObject;\n    }\n\n    // #toFix #toDo: maybe data is wrong thing, maybe it's body taht I need to put instead\n\n    /*\n    *\n    * Upload Playlist Cover Image\n    * More details can be found [here](https://developer.spotify.com/documentation/web-api/reference/playlists/create-playlist/)\n    * \n    * @param {string} playlistID Spotify ID for the playlist\n    * @param {string} imageJPEG Base64 encoded JPEG image data, max payload size is 256 KB.\n    * \n    * \n    */\n    uploadPlaylistImage = async(playlistID, imageJPEG) => {\n        let responseObject;\n\n        try {\n            let url = `https://api.spotify.com/v1/playlists/${playlistID}/images`;\n            responseObject = await axios.put(url,{\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                    'Content-Type': 'image/jpeg',\n                },\n                body: imageJPEG\n            })\n        } catch (error) {\n            return error;\n        }\n        return responseObject;\n    }\n    // LIBRARY API ENDPOINTS\n\n\n    //\n    // \n    // Check if one or more albums is already saved in current Spotify user's 'Your Music' library\n    // Link: https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-albums/\n    //\n    // @param {Array<string>} albumIDs Array of one or more album's Spotify IDs\n    // @example\n    // .checkIfAlbumSaved(['0pJJgBzj26qnE1nSQUxaB0,5ZAKzV4ZIa5Gt7z29OYHv0, 8744Bzj26Adjeieo5ZAKzV4ZIa5Gt7z29OYHv0]) \n    // --> Checks if these two albums are in saved for current user\n    //\n    // @return {Object} An object containing a JSON array of true or false values in the same order in which the ids were specified\n    // e.g. [true, false]\n    //\n    checkIfAlbumSaved = async(albumIDs) => {\n        let areAlbumSavedArray;\n        \n        let queryParam = {\n            ids: albumIDs.join(','),\n        }\n        \n        try {\n            let url = 'https://api.spotify.com/v1/me/albums/contains';\n            areAlbumSavedArray = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch (error) {\n            console.error('Error caught in checkIfAlbumSaved function', error);\n        }\n\n        return areAlbumSavedArray\n    }\n\n\n    // Important: pretty sure examples don't count here, but keep them for NPM page\n    //\n    // Check if one or more shows is already saved in current Spotify user's library\n    // More information at [Check User's Saved Albums] (https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/)\n    //\n    // @param {Array<string>} showIDs Array of one or more Shows' Spotify ID\n    // @example\n    // .checkIfShowSaved(['5AvwZVawapvyhJUIx71pdJ', '2C6ups0LMt1G8n81XLlkbsPo,2C5AvwZVawapvyhJUIx71pdJ'])\n    //\n    // @returns {Object} An object containing a JSON array of true or false values in same order in which the ids were specified\n    // e.g. [true, false]\n    //\n\n    checkIfShowSaved = async(showIDs) => {\n        let isShowSavedArray;\n        \n        let queryParam = {\n            ids: showIDs.join(',')\n        }\n        \n        try {\n            let url = 'https://api.spotify.com/v1/me/shows/contains';\n            isShowSavedArray = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n\n\n        } catch (error) {\n            console.error('Error caught in checkIfShowSaved function', error);\n        }\n        return isShowSavedArray;\n    }\n\n    //\n    // \n    // Check if one or more tracks is already saved in the current Spotify user’s ‘Your Music’ library.\n    // More information at [Check User's Saved Tracks](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-tracks/)\n    //\n    // @param {Array<string>} Array of one or more track's Spotify IDs. Max: 50 IDs.\n    // @example\n    // .checkIfTrackSaved(['0udZHhCi7p1YzMlvI4fXoK' , '3SF5puV5eb6bgRSxBeMOk9'])\n    //\n    // @return {Object} Object containing a JSON array of true or false values in same order in which the IDs were specified.\n    // e.g. [true]\n    //\n\n    checkIfTrackSaved = async (trackIDs) => {\n        let isTrackSavedArray;\n        \n        let queryParam = {\n            ids: trackIDs.join(','),\n        }\n        \n        try {\n            let url = 'https://api.spotify.com/v1/me/tracks/contains';\n            isTrackSavedArray = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n\n\n        } catch (error) {\n            console.error('Error caught in checkIfTrackSaved function', error);\n        }\n        return isTrackSavedArray;\n    }\n\n\n    // \n    // Gets a list of the albums saved in the current Spotify user's 'Your Music' library\n    // More details can be found at [Get Current User's Saved Albums](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-albums/)\n    //\n    // @param {Object} [options] Optional object that can contain up to three properties including: \"limit\", which is an \n    // integer setting the max num of objects to return, \"offset\", which represents the index of the first object\n    // to return, and \"market\", which is an optional ISO 3166-1 alpha-2 country code\n    //\n    // @example\n    //.getUserSavedAlbums({market: 'FR', limit: 50}) --> Returns 50 albums from France saved for the current user\n    // \n    // @return {Object} An object containing an array of album objects in JSON format. Each album object is accompanied by timestamp to \n    // show when it was added. More information in the above link.\n    //\n\n    getUserSavedAlbums = async (queryParam) => {\n        let savedAlbums;\n\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/albums'\n            savedAlbums = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch (error) {\n            console.error('Error caught in the getUserSavedAlbums', error);\n        }\n\n        console.log('Albums saved by user ', savedAlbums);\n        return savedAlbums;\n    }\n\n\n    // \n    // Gets a list of the shows saved in the current spotify user's library\n    // More details can be found at [Get User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/)\n    //\n    // @param {Object} [options] Optional object that can contain up to three properties including: \"limit\", which is an \n    // integer setting the max num of objects to return, \"offset\", which represents the index of the first object\n    // to return, and \"market\", which is an optional ISO 3166-1 alpha-2 country code\n    //\n    // @example\n    //.getUserSavedShows({market: 'GB', limit: 10}) --> Returns 10 shows from Great Britain saved for the current user\n    // \n    // @return {Object} An object containing an array of saved show objects in JSON format. If user does not have any shows saved, response will\n    // be an empty array. If show is unavailable in a given market, it's filtered out. \n    //\n\n    getUserSavedShows = async (queryParam) => {\n        let savedShows;\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/shows'\n            savedShows = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch (error) {\n            console.error('Error caught in the getUserSavedShows', error);\n        }\n\n        console.log('Shows saved by user ', savedShows);\n        return savedShows;\n    }\n    \n    \n\n    // \n    // Gets a list of the tracks saved in the current spotify user's 'Your Music' library\n    // More details can be found at [Get User's Saved Tracks](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-tracks/)\n    //\n    // @param {Object} [options] Optional object that can contain up to three properties including: \"limit\", which is an \n    // integer setting the max num of objects to return, \"offset\", which represents the index of the first object\n    // to return, and \"market\", which is an optional ISO 3166-1 alpha-2 country code\n    //\n    // @example\n    //.getUserSavedShows({market: 'SP'}) --> Returns 20 Tracks (default number) from Spain saved for the current user\n    //\n    // @return {Object} An object containing an array of saved track objects in JSON format. More details can be found in the link above.\n    //\n\n    getUserSavedTracks = async (limit, offset, market) => {\n        let savedTracks;\n\n        let queryParam = {\n            limit: limit, \n            offset: offset,\n            market: market\n        }\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/tracks'\n            savedTracks = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch (error) {\n            console.error('Error caught in the getUserSavedTracks', error);\n        }\n\n        console.log('Tracks saved by user ', savedTracks);\n        return savedTracks;\n    }\n\n    // Test this function here again\n\n    // \n    // Removes one or more albums from current user's 'Your Music' library\n    // \n    // @param {Array<string>} albumIDs Array of one or more album IDs to be deleted from user's library\n    //\n    // @return {Object} An object containing a response header 200 if successful. Error code returned if error encoutered.\n    //\n\n    // Important, tell spotify that the Remove User's Saved Shows vs. Removed User's Album doc is inconsistent.\n    removeAlbums = async (albumIDs) => {\n        let responseBody;\n\n        let queryParam = {\n            ids: albumIDs.join(','),\n        }\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/albums'\n            responseBody = await axios.delete(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: queryParam\n            })\n\n        } catch (error) {\n            console.error('Error caught in removeAlbums function', error);\n        }\n\n        return responseBody;\n\n    }\n\n\n    // \n    // Removes one or more shows from current user's library\n    // More details can be found at [Remove User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/) \n    //\n    // @param {Array<string>} showIDs Array of one or more show IDs to be deleted from user's library\n    //\n    // @return {Object} An object containing a response header 200 if successful. Error code returned if error encoutered.\n    //\n\n    removeShows = async (showIDs) => {\n        let responseBody;\n\n        let queryParam = {\n            ids: showIDs.join(','),\n        }\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/shows'\n            responseBody = await axios.delete(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: queryParam\n            })\n\n        } catch (error) {\n            console.error('Error caught in removeShows function', error);\n        }\n        return responseBody;\n    }\n\n\n    // \n    // Removes one or more tracks from current user's library\n    // More details can be found at [Remove User's Saved Tracks](https://developer.spotify.com/documentation/web-api/reference/library/remove-tracks-user/)\n    //\n    // @param {Array<string>} trackIDs Array of one or more track IDs to be deleted from user's library\n    //\n    // @return {Object} An object containing a response header 200 if successful. Error code returned if error encoutered.\n    //\n    removeTracks = async (trackIDs) => {\n        let responseBody;\n\n        let queryParam = {\n            ids: trackIDs.join(','),\n        }\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/tracks'\n            responseBody = await axios.delete(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: queryParam\n            })\n\n        } catch (error) {\n            console.error('Error caught in removeTracks function', error);\n        }\n        return responseBody;\n    }\n\n    // \n    // Save one or more albums to the current user's 'Your Music' library\n    // More details can be found at [Save Album For Current User](https://developer.spotify.com/documentation/web-api/reference/library/save-albums-user/)\n    //\n    // @param {Array<string>} albumIDs Array of one or more album Spotify IDs to be added to user's library\n    //\n    // @return {Object} An object containing a response header 201 (created) if successful. Error code returned if error encoutered.\n    // 403 Forbidden is returned if user did not provide authorization.\n    //\n\n    // \n    // Save one or more shows to the current user's library\n    // More details can be found at [Save Shows For Current User](https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/)\n    //\n    // @param {Array<string>} showIDs Array of one or more show Spotify IDs to be added to user's library\n    //\n    // @return {Object} An object containing a response header 200 if successful. Error code returned if error encoutered.\n    // 403 Forbidden is returned if user did not provide authorization or if more than 10,000 items saved in library.\n    //\n    saveShows = async (showIDs) => {\n        let responseBody;\n\n        let queryParam = {\n            ids: showIDs.join(','),\n        };\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/shows'\n            responseBody = await axios.put(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: queryParam\n            })\n\n        } catch (error) {\n            console.error('Error caught in saveShows function', error);\n        }\n        return responseBody;\n    }\n\n    // \n    // Save one or more tracks to the current user's library\n    // More details can be found at [Save Tracks For Current User](https://developer.spotify.com/documentation/web-api/reference/library/save-tracks-user/)\n    //\n    // @param {Array<string>} trackIDs Array of one or more track Spotify IDs to be added to user's library\n    //\n    // @return {Object} An object containing a response header 200 if successful. Error code returned if error encoutered.\n    // 403 Forbidden is returned if user did not provide authorization or if more than 10,000 items saved in library.\n    //\n    saveTracks = async (trackIDs) => {\n        let responseBody;\n\n        let queryParam = {\n            ids: trackIDs.join(','),\n        };\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/tracks'\n            responseBody = await axios.put(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: queryParam\n            })\n\n        } catch (error) {\n            console.error('Error caught in saveTracks function', error);\n        }\n        return responseBody;\n    }\n\n    // FOLLOW ENDPOINTS\n\n\n    // \n    // Checks to see if the current user is following one or more artists. \n    // See [Check If Current User Follows Artist or Users](https://developer.spotify.com/documentation/web-api/reference/follow/check-current-user-follows/)\n    // on the Spotify developer site for more information.\n    // \n    // @param {Array<string>} artistIDs (required) Array of artists' spotify IDs. Max of 5O Ids can be sent in one request.\n    // @example .isFollowingArtists(['74ASZWbe4lXaubB36ztrGX', '08td7MxkoHQkXnWAYD8d6Q']) \n    //\n    // @return {Object} Containing a JSON array of true or false values, in the same order in which the IDs were specified\n    // \n    isFollowingArtists = async (artistIDs) => {\n        let isFollowingArtist;\n\n        let queryParam = {\n            type: 'artist',\n            ids: artistIDs.join(',')\n        };\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/following/contains';\n            isFollowingArtist =  await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch(error) {\n            console.error('Error caught in isFollowingArtists function', error);\n        }\n        return isFollowingArtist;\n    }\n\n    \n    // \n    // Checks to see if the current user is following one or more users. \n    // See [Check If Current User Follows Artist or Users](https://developer.spotify.com/documentation/web-api/reference/follow/check-current-user-follows/)\n    // on the Spotify developer site for more information.\n    // \n    // @param {Array<string>} userIDs (required) Array of users' Spotify IDs. Max of 5O IDs can be sent in one request.\n    // @example .isFollowingUsers(['74ASZWbe4lXaubB36ztrGX', '08td7MxkoHQkXnWAYD8d6Q']) \n    //\n    // @return {Object} Containing a JSON array of true or false values, in the same order in which the IDs were specified\n    // \n    isFollowingUsers = async (userIDs) => {\n        let isFollowingUser;\n\n        let queryParam = {\n            type: 'user',\n            ids: userIDs.join(',')\n        }\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/following/contains';\n            isFollowingUser =  await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch(error) {\n            console.error('Error caught in isFollowingUsers function', error);\n        }\n        return isFollowingUser;\n    }\n\n    // \n    // \n    // Checks to see if one or more Spotify users are following a Spotify playlist\n    // See [Check If Users follow Playlist](https://developer.spotify.com/documentation/web-api/reference/follow/check-user-following-playlist/)\n    // on the Spotify developer site for more information.\n    // \n    // @param {string} playlistID (required) The Spotify ID of the playlist\n    // @param {Array<string>} userIDs (required) Array of users' Spotify IDs. Max of 5 IDs.\n    // @example .isFollowingUsers(['74ASZWbe4lXaubB36ztrGX', '08td7MxkoHQkXnWAYD8d6Q']) \n    //\n    // @return {Object} Containing a JSON array of true or false values, in the same order in which the IDs were specified\n    // \n    checkIfUsersFollowPlaylist = async (playlistID, userIDs) => {\n        let areUsersFollowingArray;\n\n        let queryParam = {\n            ids: userIDs.join(','),\n        }\n        try {\n            let url = 'https://api.spotify.com/v1/playlists/'+ playlistID +'/followers/contains'\n            areUsersFollowingArray =  await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch(error) {\n            console.error('Error caught in checkIfUsersFollowPlaylist function', error);\n        }\n        return areUsersFollowingArray;\n    }\n\n    // \n    // Important: come back to this, unsure about the query vs. body parameter\n    //\n    // Adds the current user as a follower of one or more artist.\n    // See [Follow Artists or User](https://developer.spotify.com/documentation/web-api/reference/follow/follow-artists-users/)\n    // on the Spotify Developer site for more information\n    //\n    // @param {Array<string>} artistIDs: Array of the artists' Spotify IDs. Maximum of 50 IDs can be sent in one request.\n    // @\n    followArtist = async (artistIDs) => {\n        let serverResponse;\n\n        let queryParam = {\n            type: 'artist',\n            ids: artistIDs\n        }\n        try {\n            let url = 'https://api.spotify.com/v1/me/following'\n            serverResponse =  await axios.put(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                    'Content-Type': 'application/json',\n                },\n                params: queryParam\n            })\n        } catch(error) {\n            console.error('Error caught in followArtist function', error);\n        }\n        return serverResponse;\n    }\n\n\n    // Same as above\n    followUser = async (spotifyIDs) => {\n        let serverResponse;\n\n        let queryParam = {\n            type: 'user',\n            ids: spotifyIDs\n        }\n        try {\n            let url = 'https://api.spotify.com/v1/me/following'\n            serverResponse =  await axios.put(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken\n                },\n                params: queryParam\n            })\n        } catch(error) {\n            console.error('Error caught in followUser function', error);\n        }\n        return serverResponse;\n    }\n    \n    // \n    // Adds the current user as a follower of a playlist. More information can be found\n    // at [Follow a Playlist](https://developer.spotify.com/documentation/web-api/reference/follow/follow-playlist/)\n    // on the Spotify Developer Site\n    // \n    // @param {string} (required) Spotify ID of the playlist. Any playlist can be followed\n    // ,regardless of its private/public status, as long as you know the playlist ID\n    // @param {Object} [options] queryParam You can add an object with the attribute \"public\", which is a boolean \n    // that'll decide whether the newly followed playlist should be in the user's public or private playlist.\n    // @example .followPlaylist('2v3iNvBX8Ay1Gt2uXtUKUT', { public: false }) --> Follows the specified playlist \n    // but don't include this playlist in the current user's public playlists\n    //\n    // @return Response with a header 200 if OK and empty response body. Header status code is error\n    // code if request failed.\n    // \n    // Important: Should you return an error?\n    // Test that it returns correctly when user follows playlist\n    // \n    followPlaylist = async (playlistID, queryParam) => {\n        let serverResponse;\n\n        try {\n            let url = `https://api.spotify.com/v1/playlists/${playlistID}/followers`\n            serverResponse =  await axios.put(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                    'Content-Type': 'application/json'\n                },\n                params: queryParam\n            })\n        } catch(error) {\n            console.error('Error caught in followPlaylist function', error);\n        }\n        return serverResponse;\n    }\n\n    // \n    // Get the Current User's followed Artists\n    // More information at [Get User's Followed Artists](https://developer.spotify.com/documentation/web-api/reference/follow/get-followed/)\n    //\n    // @param {Object} [options] queryParam Object with two optional parameters: limit and after. Limit should be an integer\n    // and represents the max number of items to return. Default: 20, Min: 1, Max: 50. After should be a string and \n    // represents the last artist ID retrieved from the previous request. After can potentially be understood as having\n    // the same effect as 'offset' in other requests.\n    //\n    // @example .getUserFollowedArtists({limit: 20}) --> Returns 20 first followed artists by the user\n    //\n    // @return {Object} Response object containing the user's followed artists or undefined if request fails.\n    // \n    // Important: verify info above is true and make sure to mention that undefined is returned when request fails in other functions\n    getUserFollowedArtists = async (queryParam) => {\n        let followedArtist;\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/following?type=artist'\n            followedArtist =  await axios.put(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: queryParam\n            })\n        } catch (error) {\n            console.error('Error caught in getUserFollowedArtists function', error);\n        }\n        return followedArtist;\n    }\n\n    // IMPORTANT, TEST THIS FUNCTION because you didn't add Content Type in the Header\n    \n    // \n    // Removes one or more artist from the current user's list of followed artists\n    // More information at [Unfollow Artists or Users](https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-artists-users/)\n    // \n    // @param {Array<string>}: Array of one or more artists' Spotify IDs\n    //\n    // @return {Object} An object with a status code 204 in the response header and an empty response\n    // body if response body is empty. \n    //\n    unfollowArtist = async(artistIDs) => {\n        let responseBody;\n\n        let queryParam = {\n            type: 'artist',\n            ids: artistIDs.join(',')\n        }\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/following'\n            responseBody = await axios.delete(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: queryParam\n            })\n\n        } catch (error) {\n            console.error('Error caught in unfollowArtist function', error);\n        }\n\n        return responseBody;\n    }\n\n        \n    // \n    // Removes one or more users from the current user's list of followed users\n    // More information at [Unfollow Artists or Users](https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-artists-users/)\n    // \n    // @param {Array<string>}: Array of one or more users' Spotify IDs\n    //\n    // @return {Object} An object with a status code 204 in the response header and an empty response\n    // body if response body is empty. \n    //\n    unfollowUser = async(userIDs) => {\n        let responseBody;\n\n        let queryParam = {\n            type: 'user',\n            ids: userIDs.join(',')\n        }\n\n        try {\n            let url = 'https://api.spotify.com/v1/me/following'\n            responseBody = await axios.delete(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: queryParam\n            })\n\n        } catch (error) {\n            console.error('Error caught in unfollowUser function', error);\n        }\n\n        return responseBody;\n    }\n\n    // \n    // Removes the current user as a follower of a playlist\n    // More information at [Unfollow Playlist](https://developer.spotify.com/documentation/web-api/reference/follow/unfollow-playlist/)\n    // \n    // @param {string}: Playlist's Spotify ID\n    //\n    // @return {Object} An object with a status code 200 and empty response body if requet successful.\n    //\n    unfollowPlaylist = async(playlistID) => {\n        let responseBody;\n\n        try {\n            let url = `https://api.spotify.com/v1/playlists/${playlistID}/followers`\n            responseBody = await axios.delete(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n            })\n\n        } catch (error) {\n            console.error('Error caught in unfollowPlaylist function', error);\n        }\n\n        return responseBody;\n    }\n\n    // Show-related API Endpoints\n\n    /*\n    *\n    * Get Spotify catalog information for a single show\n    * More details can be found at [Get A Show](https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/)\n    * \n    * @param {string} showID The show's Spotify ID\n    * @param {Object} [options] queryParam Optional object containing up to one property \"market\"\n    * which allows us to return only shows and episodes available in specified market\n    * \n    * @return {Object} Object containing a repsonse header 200 and an object containing a show Object in JSON format\n    */\n    getShowData = async (showID, queryParam) => {\n        let showData;\n\n        try {\n            let url = `https://api.spotify.com/v1/shows/${showID}`\n            showData = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: queryParam\n            })\n\n        } catch (error) {\n            console.error('Error caught in getShowData function', error);\n        }\n        return showData;\n    }\n\n    /*\n    *\n    * Get Spotify catalog information for several shows\n    * More details can be found at [Get Several Shows](https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/)\n    * \n    * @param {Array<string>} Array of Spotify ID's for the shows. Max: 50 IDs.\n    * @param {Object} [options] queryParam Optional object containing up to one property \"market\"\n    * which allows us to return only shows and episodes available in specified market\n    * \n    * @return {Object} An objecet w/ response header 200 and repsonse body containing a \"shows\" key whose value \n    * is an array of shows object in JSON format\n    */\n    getSeveralShowsData = async (showIDs, queryParam) => {\n        let showsData;\n\n        // Important to make sure that this returns undefined\n        let param = {\n            ids: showIDs.join(','),\n            market: queryParam.market\n        }\n\n        try {\n            let url = `https://api.spotify.com/v1/shows`\n            showsData = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: param\n            })\n\n        } catch (error) {\n            console.error('Error caught in getSeveralShowsData function', error);\n        }\n        return showsData;\n    }    \n\n    getShowEpisodes = async (showID, queryParam) => {\n        let episodes;\n\n        try {\n            let url = `https://api.spotify.com/v1/shows/${showID}/episodes`;\n            episodes = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: queryParam\n            })\n        } catch (error) {\n            console.error('Error caught in getShowEpisodes function', error);\n        }\n        return episodes;\n    }\n\n    // Tracks \n\n    /*\n    * Get Audio Analysis for a Track \n    * More details can be found at [Get Audio Analysis for a Track](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/)\n    * \n    * @param {string} trackID Spotify ID for the track\n    * \n    * @return {Object} An object containing low-level audio analysis of the passed in track. Describes track's structure and musical content, including\n    * rhythm, pitch, and timbre.\n    * \n    */\n    getTrackAnalysis = async (trackID) => {\n        let trackAnalysis;\n\n        try {\n            let url = `https://api.spotify.com/v1/audio-analysis/${trackID}`;\n            trackAnalysis = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                }\n            })\n        } catch (error) {\n            console.error(`Error caught in getTrackAnalysis function ${error}`)\n        }\n        return trackAnalysis;\n    }\n\n\n    /*\n    * Get Audio Features for a Track \n    * More details can be found at [Get Audio Features for a Track](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/)\n    * \n    * @param {string} trackID Spotify ID for the track\n    * \n    * @return {Object} An object containing audio features analysis such as \"energy\", \"danceability\", \"key\", \"duration\", \"speechiness\", etc.\n    * \n    */\n   getTrackFeatures = async (trackID) => {\n        let trackFeatures;\n\n        try {\n            let url = `https://api.spotify.com/v1/audio-features/${trackID}`;\n            trackFeatures = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                }\n            })\n        } catch (error) {\n            console.error(`Error caught in getTrackFeatures function ${error}`)\n        }\n        return trackFeatures;\n    }\n\n    // #toDo: decide between queryParam and paramObject as var names\n    // #test: what happens if ID has a empty space in middle or beginnign / end?\n\n    /*\n    * Get Audio Features for Several Tracks\n    * More details can be found at [Get Audio Features for Several Tracks](https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-audio-features/)\n    * \n    * @param {Array<string>} trackIDArray Array of Spotify IDs for the tracks. Maximuim: 100 IDs.\n    * \n    * @return {Object} An object containing status code (200 if successful) and an object of key \"audio_features\" that contains an array of audio feature objects\n    * in JSON format\n    * \n    */\n   getSeveralTrackFeatures = async (trackIDArray) => {\n        let severalTrackFeatures;\n        let paramObject = {\n            ids: trackIDArray.join(','),\n        }\n        try {\n            let url = `https://api.spotify.com/v1/audio-features`;\n            severalTrackFeatures = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: paramObject\n            })\n        } catch (error) {\n            console.error(`Error caught in getSeveralTrackFeatures function ${error}`)\n        }\n        return severalTrackFeatures;\n    }\n\n\n    // #toFix\n\n    /*\n    * Get Audio Features for Several Tracks\n    * More details can be found at [Get Audio Features for Several Tracks](https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-audio-features/)\n    * \n    * @param {Array<string>} trackIDArray Array of Spotify IDs for the tracks. Maximum: 50 IDs.\n    * \n    * @return {Object} An object containing status code (200 if successful) and an object of key \"tracks\" and whose value is an array of track objects\n    * in JSON format\n    * \n    */\n    getSeveralTracks = async (trackIDArray, paramObj) => {\n        let severalTracksData;\n        let paramObject = {\n            ids: trackIDArray.join(','),\n        }\n        try {\n            let url = `https://api.spotify.com/v1/audio-features`;\n            severalTracksData = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: paramObject\n            })\n        } catch (error) {\n            console.error(`Error caught in getSeveralTracks function ${error}`)\n        }\n        return severalTracksData;\n    }\n\n    /*\n    * Get Track Data\n    * More details can be found at [Get a Track](https://developer.spotify.com/documentation/web-api/reference/tracks/get-track/)\n    * \n    * @param {string} trackIDArray Array of Spotify IDs for the tracks. Maximum: 50 IDs.\n    * @param {Object} [options] paramObject Optional object that can hold a \"market\" attribute, which represents an ISO 3166-1 alpha-2 \n    * country code \n    * \n    * @return {Object} An object containing track data object\n    * \n    */\n    getTrackData = async (trackID, paramObject) => {\n        let trackData;\n\n        try {\n            let url = `https://api.spotify.com/v1/tracks/${trackID}`;\n            trackData = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                },\n                params: paramObject\n            })\n        } catch (error) {\n            console.error(`Error caught in getTrackData function ${error}`)\n        }\n        return trackData;\n    }\n\n    /*\n    * Get Current User's Profile \n    * More details can be found at [Get Current User's Profile](https://developer.spotify.com/documentation/web-api/reference/users-profile/get-current-users-profile/)\n    * \n    * @return {Object} With status code 200 in the header if successful and user object in JSON format containing current user's data.\n    * Returns error 403 Forbidden if requesting fields that you don't have the user's authorization to access.\n    * \n    */\n   getCurrentUserProfile = async () => {\n       let currentUserData;\n\n       try {\n           let url = 'https://api.spotify.com/v1/me';\n           currentUserData = await axios.get(url, {\n            headers: {\n                'Authorization': 'Bearer ' + this.accessToken,\n            }\n        })\n       } catch (error) {\n           console.error(`Error caught in getCurrentUserProfile function ${error}`)\n       }\n       return currentUserData;\n   }\n\n   /*\n   * Get a User's Profile\n   * More details can be found at [Get a User's Profile](https://developer.spotify.com/documentation/web-api/reference/users-profile/get-users-profile/)\n   * \n   * @param {string} userID The user's Spotify user ID\n   * \n   * @return {Object} An object containing public information about a Spotify user. If error encountered, error code returned. If usre does not exist\n   * code 404 Not Found returned. \n   * \n   */\n   getUserData = async (userID) => {\n       let userData;\n\n       try {\n           let url = `https://api.spotify.com/v1/users/${userID}`\n            userData = await axios.get(url, {\n                headers: {\n                    'Authorization': 'Bearer ' + this.accessToken,\n                }\n            })\n       } catch (error) {\n           console.error(`Error encountered in the getUserData function ${error}`);\n       }\n       return userData;\n   }\n\n\n\n}\n\nfunction isString (value) {\n    return typeof value === 'string' || value instanceof String;\n}\n\n\nexport default SpotifyAPI;\n\n\n// Get New Releases function\n\n         // if (limit == undefined && country == undefined && offset == undefined) {\n            //     paramObject = {};\n            // } else if (limit != undefined && country == undefined && offset == undefined) {\n            //     paramObject = {\n            //         limit: limit\n            //     };\n            // } else if (limit == undefined && country != undefined && offset == undefined) {\n            //     paramObject = {\n            //         country: country\n            //     };\n            // } else if (limit == undefined && country == undefined && offset != undefined) {\n            //     paramObject = {\n            //         offset: offset\n            //     };\n            // } else if (limit != undefined && country != undefined && offset == undefined) {\n            //     paramObject = {\n            //         limit: limit,\n            //         country: country\n            //     };\n            // } else if (limit != undefined && country == undefined && offset != undefined) {\n            //     paramObject = {\n            //         limit: limit,\n            //         offset: offset\n            //     };\n            // } else if (limit == undefined && country != undefined && offset != undefined) {\n            //     paramObject = {\n            //         country: country,\n            //         offset: offset\n            //     }\n            // } else if (limit != undefined && country != undefined && offset != undefined) {\n            //     paramObject = {\n            //         country: country,\n            //         offset: offset,\n            //         limit: limit\n            //     }\n            // }","// Login Container\n// Contains all smart and dumb components necessary for login into the application\n\n// External Packages\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport qs from 'qs';\nimport styled, { keyframes } from 'styled-components';\n// Internal Modules\nimport { authenticateUser, storeUserData, storeAccessToken } from '../actionCreators/actions';\nimport NeumorphicLoginWrapper from '../styledComponents/NeumorphicLoginWrapper';\nimport NeumorphicLoginButton from '../styledComponents/NeumorphicLoginButton';\nimport store from '../store/store';\n\n// Utility Functions\nimport SpotifyAPI from '../utilityLibrary/spotify';\n\n\nconst logoAnimation = keyframes`\n    0%{background-position:0% 61%}\n    50%{background-position:100% 40%}\n    100%{background-position:0% 61%}\n`;\n\nconst LogoWrapper = styled.div`\n    width: 100px;\n    height: 100px;\n    border-radius: 50%;\n    margin: 0 auto;\n    background: linear-gradient(180deg, #0ac14b, #d1f9d2);  \n    background-size: 600% 600%;\n    -webkit-animation: ${logoAnimation} 2s ease infinite;\n    -moz-animation: ${logoAnimation} 2s ease infinite;\n    animation: ${logoAnimation} 2s ease infinite;\n    box-shadow: 0px 0px 2px #ECF0F3, 0px 0px 0px 5px #ECF0F3, 8px 8px 15px #A7AAAF, -8px -8px 15px #FFFFFF;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n// background-image: url(${SpotifyLogo});\n// Alernate blue-lavender colored animated background:\n// background: linear-gradient(270deg, #acc4ef, #b3abf0);\n\nconst TitleText = styled.div`\n    text-align: center;\n    font-size: 28px;\n    padding-top: 24px;\n    letter-spacing: 0.5px;\n`;\n\nconst SubTitleText = styled.div`\n    text-align: center;\n    font-size: 15px;\n    padding-top: 7px;\n    letter-spacing: 3px;\n`;\n\nconst SpotifyLogoLineWrapper = styled.div`\n    width: 50%;\n    background-color: transparent;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`\n\nconst SpotifyLogoLargeLine = styled.div`\n    width: 100%;\n    height: 8px;\n    background-color: #ECF0F3;\n    border-radius: 5px;\n    margin-bottom: 2px;\n    margin-top: 5px;\n`\n// border-top-left-radius: 20px;\n// border-top-right-radius: 20px;\n\nconst SpotifyLogoMediumLine = styled(SpotifyLogoLargeLine)`\n    width: 70%;\n    height: 7px\n    margin-top: 0px;\n\n`\n\nconst SpotifyLogoSmallLine = styled(SpotifyLogoMediumLine)`\n    width: 50%;\n    height: 7px;\n`\n\n// Alternate blue-purple color:\n// background: #b3abf0;\n// &:hover {\n//     background: #beb5ff;\n// }\n// &:active {\n//     background: #a29adb;\n// }\n\n\n\n// Change the Login URI so that the domain is chosen depending on the\n// environment that we're in, production and development\n\nclass LoginContainer extends Component {\n\n    constructor(props){ \n        super(props);\n        this.state = {}\n    }\n\n    // After the function connectToSpotify below is called because of a user click, the componentDidMount function is\n    // called again and sets in the hashParams variable to be equal to an object containing the access_token attribute\n    // which we need to use in future API calls to retrieve the data  we want\n    componentDidMount = async () => {\n        let hashParams = {}\n        let e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n        while ((e = r.exec(q))) {\n            hashParams[e[1]] = decodeURIComponent(e[2]);\n        }\n\n        // Change authentication state to true and retrieve user spotify information in order to display main page \n        if (hashParams.access_token) {\n            let accessToken = hashParams.access_token;\n            store.dispatch(storeAccessToken(accessToken));\n            this.authenticateUser(true)\n            let spotify = new SpotifyAPI(hashParams.access_token)\n            let playlist = await spotify.getCurrentUserPlaylist()\n            let userInformation = await spotify.getCurrentUserProfile();\n            \n            // Dispatch user data object to be stored in redux store (one-level of nesting)\n            // Another way to do it wouldbe to extract the different data points (email, id, display_name) and store them\n            // individually, to avoid nesting.\n            const userData = userInformation.data;\n            store.dispatch(storeUserData(userData));\n            console.log('Current user information', userInformation);\n        }\n    }\n\n    // Call made in order to retrieve the user's spotify information, using the access token that we retrieved from \n    // the call by the connectToSpotify function\n    getUserSpotifyInfo = async (accessToken) => {\n        const user = await axios.get(\"https://api.spotify.com/v1/me\", {\n            headers: {\n              \"Authorization\": \"Bearer \" + accessToken\n            }\n        })\n        .then((response) => {\n            return response\n        })\n        .catch((err) => {\n            console.log('Error caught in axios call', err);\n        })\n\n        // Store data in redux store to make sure it's accessible by future components\n        store.dispatch(storeUserData(user.data))\n    }\n\n    // Function called when SpotifyButton is clicked on Login page, triggers redirect to Spotify login in order to retrieve\n    // the access token necessary to make API calls\n    connectToSpotify = () => {\n        // Redirects us to spotify page\n        window.location.href =\n        \"https://accounts.spotify.com/authorize?client_id=df148a09256046c68a0c535f9da43238&scope=playlist-read-private%20playlist-read-collaborative%20playlist-modify-public%20user-read-recently-played%20playlist-modify-private%20ugc-image-upload%20user-follow-modify%20user-follow-read%20user-library-read%20user-library-modify%20user-read-private%20user-read-email%20user-top-read%20user-read-playback-state&response_type=token&redirect_uri=http://localhost:3000\";\n    }\n    \n    // Ensures that the isAuthenticated state in the redux store is set to true\n    // Called after we successfully received the access token, which allows us to retrieve the remaining\n    // of the user's information\n    authenticateUser = () => {\n        store.dispatch(authenticateUser());\n        \n    }\n    render() {\n        return (\n            // <LoginWrapper>\n            // <AnimatedText> Spotify API </AnimatedText>\n            // <SmallHeaderText> React-Redux boilerplate for your Spotify-API-based application </SmallHeaderText>\n            // <SpotifyButton onClick={this.connectToSpotify} > Login </SpotifyButton>\n            // </LoginWrapper>    \n            <NeumorphicLoginWrapper>\n                <LogoWrapper>\n                    <SpotifyLogoLineWrapper>\n                        <SpotifyLogoLargeLine />\n                        <SpotifyLogoMediumLine />\n                        <SpotifyLogoSmallLine />\n                    </SpotifyLogoLineWrapper>\n                </LogoWrapper>\n                <TitleText> Spotify </TitleText>\n                <SubTitleText> Boilerplate </SubTitleText>\n                <NeumorphicLoginButton onClick={this.connectToSpotify}>\n                    Login\n                </NeumorphicLoginButton>\n            </NeumorphicLoginWrapper>\n        )\n    }\n}\n\nexport default LoginContainer\n","// Dashboard displayed once user successfully logs in\n\n// External Packages\nimport React, { Component } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n// Internal Modules\nimport NeumorphicLoginWrapper from '../styledComponents/NeumorphicLoginWrapper';\nimport NeumorphicLoginButton from '../styledComponents/NeumorphicLoginButton';\nimport { signOutUser,removeAccessToken } from '../actionCreators/actions';\nimport store from '../store/store';\n\n\nconst loadingAnimation = keyframes`\n    0%{background-position:0% 61%}\n    50%{background-position:100% 40%}\n    100%{background-position:0% 61%}\n`;\n\nconst ImageWrapper = styled.div`\n    width: 100px;\n    height: 100px;\n    border-radius: 50%;\n    margin: 0 auto;\n    background: ${props => props.imageLoaded ? `url(${props.imageLoaded})` :  'linear-gradient(270deg, #e1e1e1, #cdcdcd, #e1e1e1, #cdcdcd, #e1e1e1, #cdcdcd)'};\n    -webkit-animation: ${loadingAnimation} 1s ease infinite;\n    -moz-animation: ${loadingAnimation} 1s ease infinite;\n    animation: ${loadingAnimation} 1s ease infinite;\n    background-size: ${props => props.imageLoaded ? '100px' :  '50000% 50000%'};\n    opacity: ${props => props.imageLoaded ? '1': '0'};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    box-shadow: 0px 0px 2px #ECF0F3, 0px 0px 0px 5px #ECF0F3, 8px 8px 15px #A7AAAF, -8px -8px 15px #FFFFFF;\n    transition: opacity 2s ease-in;\n`;\n\nconst TextWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n`\nconst TitleText = styled.div`\n    text-align: center;\n    font-size: 20px;\n    letter-spacing: 0.5px;\n    background: ${props => props.imageLoaded ? 'transparent' :  'linear-gradient(270deg, #e1e1e1, #cdcdcd, #e1e1e1, #cdcdcd, #e1e1e1, #cdcdcd)'};\n    -webkit-animation: ${loadingAnimation} 1s ease infinite;\n    -moz-animation: ${loadingAnimation} 1s ease infinite;\n    animation: ${loadingAnimation} 1s ease infinite;\n    background-size: ${props => props.imageLoaded ? '100px' :  '50000% 50000%'};\n    color: ${props => props.imageLoaded ? 'black': 'transparent'};\n    margin-top: 30px;\n    width: ${props => props.imageLoaded ? 'auto' : '150px'};\n    margin-bottom 20px;\n    border-radius: 25px;\n`;\n// box-shadow: ${props => props.imageLoaded ? '0px 0px 0px' : '13px 13px 20px #CBCED1, -13px -13px 20px #FFFFFF'};\n\nconst SubTitleText = styled.div`\n    text-align: center;\n    font-size: 13px;\n    font-weight: 600;\n    background: ${props => props.imageLoaded ? 'transparent' :  'linear-gradient(270deg, #e1e1e1, #cdcdcd, #e1e1e1, #cdcdcd, #e1e1e1, #cdcdcd)'};\n    -webkit-animation: ${loadingAnimation} 1s ease infinite;\n    -moz-animation: ${loadingAnimation} 1s ease infinite;\n    animation: ${loadingAnimation} 1s ease infinite;\n    background-size: ${props => props.imageLoaded ? '120px' :  '50000% 50000%'};\n    width: ${props => props.imageLoaded ? 'auto' : '90px'};\n    color: ${props => props.imageLoaded ?'black' : 'transparent'};\n    border-radius: 25px;\n`;\n// box-shadow: ${props => props.imageLoaded ? '0px 0px 0px' : '13px 13px 20px #CBCED1, -13px -13px 20px #FFFFFF'};\n\nclass AuthenticatedDashboard extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            // Empty for now\n        }\n    }\n\n    handleSignOut = () => {\n        store.dispatch(signOutUser());\n        store.dispatch(removeAccessToken());\n    }\n\n    render() {\n        const { userData } = this.props;\n        const userImage = userData.images ? userData.images[0].url : '';\n        const displayName = userData.display_name ? userData.display_name : 'No name yet';\n        const  email = userData.email ? userData.email : '';\n        const followerCount = userData.followers ? userData.followers.total : 'No';\n        const userType = userData.type ? userData.type : '';\n        const followerSentence = followerCount + ' followers';\n        return (\n            <NeumorphicLoginWrapper>\n                <ImageWrapper imageLoaded={userImage} />\n                <TextWrapper>\n                    <TitleText imageLoaded={userImage} > {displayName} </TitleText>\n                    <SubTitleText imageLoaded={userImage}> { followerCount !== '' && followerSentence} </SubTitleText>\n                </TextWrapper>\n                <NeumorphicLoginButton onClick={this.handleSignOut}>\n                    Sign out\n                </NeumorphicLoginButton>\n            </NeumorphicLoginWrapper>\n        )\n    }\n}\n\n// Typechecking for the AuthenticatedDashboard's passed in props \nAuthenticatedDashboard.propTypes = {\n\tuserData: PropTypes.object,\n};\n\n// Sets the default props of the AuthenticatedDashboard container\nAuthenticatedDashboard.defaultProps = {\n\tuserData: {}\n};\n\n// Maps the store's properties to the AuthenticatedDashboard container's props in order to render the\n// correct application UI when user authenticates\nfunction mapStateToProps(state) {\n\treturn {\n\t\t\tuserData: state.spotify.userData\n\t};\n}\n\nexport default connect(\n  mapStateToProps,\n)(AuthenticatedDashboard);\n\n\n","// External Packages\nimport React from 'react';\nimport { Switch, BrowserRouter } from 'react-router-dom';\n// Internal Modules\n// Containers\n// Components\nimport AuthenticatedRoute from '../components/AuthenticatedRoute';\nimport UnauthenticatedRoute from '../components/UnauthenticatedRoute';\nimport LoginContainer from '../containers/LoginContainer';\nimport AuthenticatedDashboard from '../containers/AuthenticatedDashboard';\n// import TestComponent from '../components/TestComponent';\n\n// #toDo: create 404 error page displayed when user can't login.\n\nexport default ({childProps}) =>\n    <BrowserRouter>\n        <Switch>\n            <UnauthenticatedRoute path='/' exact component={LoginContainer} props={childProps} /> \n            <AuthenticatedRoute path='/authenticated' exact component={AuthenticatedDashboard} props={childProps} />\n        </Switch>\n    </BrowserRouter>\n","// Root wrapper - wraps the whole application\n\nimport styled from 'styled-components';\n\nconst MainAppWrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    background-color: #ECF0F3;\n    box-sizing: border-box;\n    justify-content: center;\n    display: flex;\n    align-items: center;\n`\n\nexport default MainAppWrapper\n","// App.js\n// Root of the application\n\n// External Packages\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\n// Internal Modules and files\nimport './App.css';\nimport Routes from './routing/Routes';\n// Containers\nimport LoginContainer from './containers/LoginContainer';\n// Styled Components\nimport MainAppWrapper from './styledComponents/MainAppWrapper';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      response: ''\n    }\n  }\n\n  render() {\n\n    const childProps = {\n      isAuthenticated: this.props.isAuthenticated,\n    }\n\n    console.log('Is user authenticated ', childProps);\n\n    return (\n      <MainAppWrapper>\n          <Routes childProps={childProps} />\n      </MainAppWrapper>\n    );\n  }\n\n}\n\n// Typechecking for the App's passed in props \nApp.propTypes = {\n\tisAuthenticated: PropTypes.bool,\n};\n\n// Sets the default props of the app container\nApp.defaultProps = {\n\tisAuthenticated: false\n};\n\n// Maps the store's properties to the App container's props in order to render the\n// correct application UI when user authenticates\nfunction mapStateToProps(state) {\n\treturn {\n\t\t\tisAuthenticated: state.authentication.isAuthenticated\n\t};\n}\n\nexport default connect(\n  mapStateToProps,\n)(App);\n","// Main Entry point of application\n\n// External Packages\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// Internal Modules\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Log from './utilityLibrary/dev/logging'\n// Redux\nimport store from './store/store'\n// Containers\nimport App from './App';\n\nrequire('dotenv').config(); // Allows us to access our variables in the .env file of our root directory\n\n// Ensures logging does not show in the console when the app is set to production\nif (process.env.REACT_ENV !== 'production') {\n    localStorage.setItem('debug', 'spotify-app:*');\n    Log.info('Environment variables accessible');\n}\n\nReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}