{"version":3,"sources":["webpack:///./app/index.tsx","webpack:///./app/actions/mockActions.ts","webpack:///./app/middleware/logger.ts","webpack:///./app/reducers/mockReducer.ts","webpack:///./app/reducers/index.ts","webpack:///./app/store/index.ts","webpack:///./app/components/Footer/index.tsx","webpack:///./app/components/Header/index.tsx","webpack:///./app/components/Login/index.tsx","webpack:///./app/containers/App/index.tsx","webpack:///./main.tsx"],"names":["App","module","path","component","MockActions","Type","logger","store","next","action","addMock","createAction","ADD_MOCK","mockReducer","handleActions","state","payload","text","id","reduce","max","mock","Math","rootReducer","configureStore","initialState","middleware","Footer","Header","Login","href","hot","history","document","getElementById"],"mappings":"0FAAA,yFAKaA,EAAM,cAAIC,EAAJ,EAAY,WAAM,OACnC,gBAAC,IAAM,KACL,gBAAC,IAAK,CAACC,KAAK,IAAIC,UAAW,Y,wDCJd,EAAAC,EACHC,E,SCFDC,G,MAAqB,SAACC,GAAU,gBAACC,GAAS,gBAACC,GAItD,OAAOD,EAAKC,O,gBDHGL,EAAA,MAAW,IAC1B,SAAYC,GACV,sBADF,CAAYA,EAAA,EAAAA,OAAA,EAAAA,KAAI,KAIH,EAAAK,QAAU,OAAAC,EAAA,GAA6CN,EAAKO,UEH3E,IAOaC,EAAc,OAAAC,EAAA,KAAa,MAEnC,EAAYT,KAAKO,UAAW,SAACG,EAAON,GACnC,OAAIA,EAAOO,SAAWP,EAAOO,QAAQC,KAC5B,CACL,CACEC,GAAIH,EAAMI,QAAO,SAACC,EAAKC,GAAS,OAAAC,KAAKF,IAAIC,EAAKH,IAAM,EAAGE,KAAM,GAAK,EAClEH,KAAMR,EAAOO,QAAQC,O,OAEpBF,GAGAA,G,GAnB6B,CACxC,CACEG,GAAI,EACJD,KAAM,UCAGM,EAAc,0BAA2B,CACpDF,KAAMR,ICJD,SAASW,EAAeC,GAC7B,IAAIC,EAAa,0BAAgBpB,GAiBjC,OAXc,sBAAYiB,EAAoBE,EAAqBC,GAZrE,mC,2CCGaC,EAAS,WAAM,OAC1B,8BACE,qCCHSC,EAAS,WAAM,OAC1B,8BACE,sCCGSC,EAAQ,WAAM,OACzB,+BACE,qBAAGC,KAAK,UAAQ,yBCTpB,kCAIO,IAAM9B,EAAM,WAAM,OACvB,2BACE,gBAAC4B,EAAM,MACP,gBAACC,EAAK,MACN,gBAACF,EAAM,S,gCCRX,8EASA1B,EAAO8B,IAGP,IAAMC,EAAU,cACVzB,EAAQ,cAEd,SACE,gBAAC,IAAQ,CAACA,MAAOA,GACf,gBAAC,IAAM,CAACyB,QAASA,GACf,gBAAC,IAAG,QAGRC,SAASC,eAAe,U","file":"app.97364b2f0b3b5ca3028c.js","sourcesContent":["import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { App as MoodyApp } from 'app/containers/App';\nimport { hot } from 'react-hot-loader';\n\nexport const App = hot(module)(() => (\n  <Switch>\n    <Route path=\"/\" component={MoodyApp} />\n  </Switch>\n));\n","import { createAction } from 'redux-actions';\r\nimport { MockModel } from 'app/models';\r\n\r\nexport namespace MockActions {\r\n  export enum Type {\r\n    ADD_MOCK = 'ADD_MOCK',\r\n  }\r\n\r\n  export const addMock = createAction<PartialPick<MockModel, 'text'>>(Type.ADD_MOCK);\r\n}\r\n\r\nexport type MockActions = Omit<typeof MockActions, 'Type'>;\r\n","import { Middleware } from 'redux';\n\nexport const logger: Middleware = (store) => (next) => (action) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(action);\n  }\n  return next(action);\n};\n","import { handleActions } from 'redux-actions';\r\nimport { RootState } from './state';\r\nimport { MockActions } from 'app/actions/mockActions';\r\nimport { MockModel } from 'app/models';\r\n\r\nconst initialState: RootState.MockState = [\r\n  {\r\n    id: 1,\r\n    text: 'Mock',\r\n  },\r\n];\r\n\r\nexport const mockReducer = handleActions<RootState.MockState, MockModel>(\r\n  {\r\n    [MockActions.Type.ADD_MOCK]: (state, action) => {\r\n      if (action.payload && action.payload.text) {\r\n        return [\r\n          {\r\n            id: state.reduce((max, mock) => Math.max(mock.id || 1, max), 0) + 1,\r\n            text: action.payload.text,\r\n          },\r\n          ...state,\r\n        ];\r\n      }\r\n      return state;\r\n    },\r\n  },\r\n  initialState,\r\n);\r\n","import { combineReducers } from 'redux';\nimport { RootState } from './state';\nimport { mockReducer } from './mockReducer';\n\nexport { RootState };\n\n// NOTE: current type definition of Reducer in 'redux-actions' module\n// doesn't go well with redux@4\nexport const rootReducer = combineReducers<RootState>({\n  mock: mockReducer as any,\n});\n","import { Store, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { logger } from 'app/middleware';\nimport { RootState, rootReducer } from 'app/reducers';\n\nexport function configureStore(initialState?: RootState): Store<RootState> {\n  let middleware = applyMiddleware(logger);\n\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = composeWithDevTools(middleware);\n  }\n\n  const store = createStore(rootReducer as any, initialState as any, middleware) as Store<\n    RootState\n  >;\n\n  if (module.hot) {\n    module.hot.accept('app/reducers', () => {\n      const nextReducer = require('app/reducers');\n      store.replaceReducer(nextReducer);\n    });\n  }\n\n  return store;\n}\n","import * as React from 'react';\n// import * as style from './style.css';\n\nexport const Footer = () => (\n  <footer>\n    <p>Footer</p>\n  </footer>\n);\n","import * as React from 'react';\n\nexport const Header = () => (\n  <header>\n    <h1>Header</h1>\n  </header>\n);\n","import * as React from 'react';\n// import * as style from './style.css';\n\nexport namespace Login {\n  export interface Props {}\n}\n\nexport const Login = () => (\n  <section>\n    <a href=\"/login\">Log in with Spotify</a>\n  </section>\n);\n\n","import * as React from 'react';\n// import * as style from './style.css';\nimport { Header, Login, Footer } from 'app/components';\n\nexport const App = () => (\n  <div>\n    <Header />\n    <Login />\n    <Footer />\n  </div>\n);\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createBrowserHistory } from 'history';\nimport { configureStore } from 'app/store';\nimport { Router } from 'react-router';\nimport { App } from './app';\n\n// hot reloading\nmodule.hot && module.hot.accept();\n\n// prepare store\nconst history = createBrowserHistory();\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}